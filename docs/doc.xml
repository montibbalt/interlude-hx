<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="40" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="43" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="40" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="43" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
	</class>
	<abstract path="Class" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/EReg.hx" extern="1">
		<escape public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<match public="1" set="method">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="Interlude" params="" file="src/Interlude.hx"><a/></typedef>
	<typedef path="Curry2" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.Curry2"/></typedef>
	<typedef path="Curry3" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.Curry3"/></typedef>
	<typedef path="Curry4" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.Curry4"/></typedef>
	<typedef path="Curry5" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.Curry5"/></typedef>
	<typedef path="Curry6" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.Curry6"/></typedef>
	<typedef path="FunctionTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.FunctionTools"/></typedef>
	<typedef path="ValueTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.ValueTools"/></typedef>
	<typedef path="Trampoline" params="X" file="src/Interlude.hx" module="Interlude"><e path="interlude.func.Trampoline"><c path="Trampoline.X"/></e></typedef>
	<typedef path="TrampolineTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.func.TrampolineTools"/></typedef>
	<typedef path="Array1" params="X" file="src/Interlude.hx" module="Interlude"><x path="interlude.ds.Array1"><c path="Array1.X"/></x></typedef>
	<typedef path="Either" params="X:Y" file="src/Interlude.hx" module="Interlude"><e path="haxe.ds.Either">
	<c path="Either.X"/>
	<c path="Either.Y"/>
</e></typedef>
	<typedef path="EitherTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.ds.EitherTools"/></typedef>
	<typedef path="Iterable1" params="X" file="src/Interlude.hx" module="Interlude"><x path="interlude.ds.Iterable1"><c path="Iterable1.X"/></x></typedef>
	<typedef path="Lazy" params="X" file="src/Interlude.hx" module="Interlude"><c path="interlude.ds.Lazy"><c path="Lazy.X"/></c></typedef>
	<typedef path="MapTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.ds.MapTools"/></typedef>
	<typedef path="NullTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.ds.NullTools"/></typedef>
	<typedef path="Option" params="X" file="src/Interlude.hx" module="Interlude"><e path="haxe.ds.Option"><c path="Option.X"/></e></typedef>
	<typedef path="OptionTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.ds.OptionTools"/></typedef>
	<typedef path="Outcome" params="X" file="src/Interlude.hx" module="Interlude"><e path="interlude.ds.Outcome"><c path="Outcome.X"/></e></typedef>
	<typedef path="OutcomeTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.ds.OutcomeTools"/></typedef>
	<typedef path="KeyValuePair" params="K:V" file="src/Interlude.hx" module="Interlude"><t path="interlude.ds.KeyValuePair">
	<c path="KeyValuePair.K"/>
	<c path="KeyValuePair.V"/>
</t></typedef>
	<typedef path="Pair" params="X:Y" file="src/Interlude.hx" module="Interlude"><x path="interlude.ds.Pair">
	<c path="Pair.X"/>
	<c path="Pair.Y"/>
</x></typedef>
	<typedef path="State" params="X:Y" file="src/Interlude.hx" module="Interlude"><x path="interlude.ds.State">
	<c path="State.X"/>
	<c path="State.Y"/>
</x></typedef>
	<typedef path="AsyncState" params="X:Y" file="src/Interlude.hx" module="Interlude"><x path="interlude.ds.AsyncState">
	<c path="AsyncState.X"/>
	<c path="AsyncState.Y"/>
</x></typedef>
	<typedef path="Trio" params="X:Y:Z" file="src/Interlude.hx" module="Interlude"><x path="interlude.ds.Trio">
	<c path="Trio.X"/>
	<c path="Trio.Y"/>
	<c path="Trio.Z"/>
</x></typedef>
	<typedef path="Unit" params="" file="src/Interlude.hx" module="Interlude"><e path="interlude.ds.Unit"/></typedef>
	<typedef path="Weighted" params="X" file="src/Interlude.hx" module="Interlude"><x path="interlude.ds.Weighted"><c path="Weighted.X"/></x></typedef>
	<typedef path="WeightedTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.ds.WeightedTools"/></typedef>
	<typedef path="IterableTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.iter.IterableTools"/></typedef>
	<typedef path="IteratorTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.iter.IteratorTools"/></typedef>
	<typedef path="KVIterableTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.iter.KeyValueIterableTools"/></typedef>
	<typedef path="KVIteratorTools" params="" file="src/Interlude.hx" module="Interlude"><c path="interlude.iter.KeyValueIteratorTools"/></typedef>
	<typedef path="Task" params="X" file="src/Interlude.hx" module="Interlude"><c path="interlude.reactive.Task"><c path="Task.X"/></c></typedef>
	<typedef path="Surprise" params="X" file="src/Interlude.hx" module="Interlude"><t path="interlude.reactive.Surprise"><c path="Surprise.X"/></t></typedef>
	<typedef path="Observable" params="X" file="src/Interlude.hx" module="Interlude"><c path="interlude.reactive.Observable"><c path="Observable.X"/></c></typedef>
	<typedef path="DateTools_" params="" file="src/Interlude.hx" module="Interlude"><c path="DateTools"/></typedef>
	<typedef path="Math_" params="" file="src/Interlude.hx" module="Interlude"><c path="Math"/></typedef>
	<typedef path="StringTools_" params="" file="src/Interlude.hx" module="Interlude"><c path="StringTools"/></typedef>
	<typedef path="Map" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<class path="Std" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m></meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/StringBuf.hx" extern="1">
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length set="method"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" set="method">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" set="method">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" set="method">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Sys" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/Sys.hx">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<_command set="method" static="1"><f a="cmd">
	<c path="String"/>
	<x path="Int"/>
</f></_command>
		<exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<programPath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":require"><e>sys</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Type" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<enum path="haxe.StackItem" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<abstract path="haxe.CallStack" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/haxe/Exception.hx">
		<thrown set="method" line="25" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionMessage>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionMessage>
		<__nativeStack>
			<x path="haxe.CallStack"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__skipStack expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.Exception.thrown"</e></m></meta>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<get_message set="method" line="66"><f a=""><c path="String"/></f></get_message>
		<get_native final="1" set="method" line="74"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="35">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Log" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/haxe/NativeStackTrace.hx">
		<saveStack public="1" get="inline" set="null" line="12" static="1">
			<f a="exception">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="15" static="1"><f a=""><c path="Array"><e path="haxe.StackItem"/></c></f></callStack>
		<_callStack set="method" line="20" static="1"><f a=""><c path="Array"><e path="haxe.StackItem"/></c></f></_callStack>
		<exceptionStack public="1" set="method" line="25" static="1"><f a=""><c path="Array"><e path="haxe.StackItem"/></c></f></exceptionStack>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.
	
	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ValueException" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="78">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="81">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="78">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":keep"/></meta>
	</enum>
	<class path="haxe.io.Bytes" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/haxe/io/Bytes.hx" extern="1">
		<alloc public="1" set="method" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" static="1"><f a="s:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<ofHex public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofHex>
		<fastGet public="1" set="method" static="1"><f a="b:pos">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<get public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getFloat public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<setDouble public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDouble>
		<setFloat public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloat>
		<getUInt16 public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt16>
		<setUInt16 public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt16>
		<getInt32 public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt32>
		<getInt64 public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getInt64>
		<setInt32 public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt32>
		<setInt64 public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setInt64>
		<getString public="1" set="method"><f a="pos:len:?encoding">
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.io.Encoding"/>
	<c path="String"/>
</f></getString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method"><f a=""><c path="String"/></f></toHex>
		<getData public="1" set="method"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new public="1" set="method"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/haxe/io/BytesBuffer.hx" extern="1">
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length set="method"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" set="method"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" set="method"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" set="method"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" set="method"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" set="method"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" set="method"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="haxe.io._BytesData.NativeBytesDataAbstract" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData">
		<from><icast><c path="haxe.io.Bytes"/></icast></from>
		<this><c path="haxe.io.Bytes"/></this>
		<to><icast><c path="haxe.io.Bytes"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="haxe.io._BytesData.NativeBytesDataAbstract_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.BytesData" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/haxe/io/BytesData.hx"><x path="haxe.io._BytesData.NativeBytesDataAbstract"/></typedef>
	<class path="haxe.io.Input" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/io/Input.hx">
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/io/Output.hx">
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.iterators.ArrayKeyValueIterator" params="T" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/iterators/ArrayKeyValueIterator.hx">
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<array><c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c></array>
		<hasNext public="1" get="inline" set="null" line="36"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="41"><f a=""><a>
	<value><c path="haxe.iterators.ArrayKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="30"><f a="array">
	<c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<typedef path="interlude.Array1" params="X" file="src/interlude/DS.hx" module="interlude.DS"><x path="interlude.ds.Array1"><c path="interlude.Array1.X"/></x></typedef>
	<typedef path="interlude.Either" params="X:Y" file="src/interlude/DS.hx" module="interlude.DS"><e path="haxe.ds.Either">
	<c path="interlude.Either.X"/>
	<c path="interlude.Either.Y"/>
</e></typedef>
	<typedef path="interlude.Iterable1" params="X" file="src/interlude/DS.hx" module="interlude.DS"><x path="interlude.ds.Iterable1"><c path="interlude.Iterable1.X"/></x></typedef>
	<typedef path="interlude.Lazy" params="X" file="src/interlude/DS.hx" module="interlude.DS"><c path="interlude.ds.Lazy"><c path="interlude.Lazy.X"/></c></typedef>
	<typedef path="interlude.Option" params="X" file="src/interlude/DS.hx" module="interlude.DS"><e path="haxe.ds.Option"><c path="interlude.Option.X"/></e></typedef>
	<typedef path="interlude.Outcome" params="X" file="src/interlude/DS.hx" module="interlude.DS"><e path="interlude.ds.Outcome"><c path="interlude.Outcome.X"/></e></typedef>
	<typedef path="interlude.KeyValuePair" params="K:V" file="src/interlude/DS.hx" module="interlude.DS"><t path="interlude.ds.KeyValuePair">
	<c path="interlude.KeyValuePair.K"/>
	<c path="interlude.KeyValuePair.V"/>
</t></typedef>
	<typedef path="interlude.Pair" params="X:Y" file="src/interlude/DS.hx" module="interlude.DS"><x path="interlude.ds.Pair">
	<c path="interlude.Pair.X"/>
	<c path="interlude.Pair.Y"/>
</x></typedef>
	<typedef path="interlude.State" params="X:Y" file="src/interlude/DS.hx" module="interlude.DS"><x path="interlude.ds.State">
	<c path="interlude.State.X"/>
	<c path="interlude.State.Y"/>
</x></typedef>
	<typedef path="interlude.AsyncState" params="X:Y" file="src/interlude/DS.hx" module="interlude.DS"><x path="interlude.ds.AsyncState">
	<c path="interlude.AsyncState.X"/>
	<c path="interlude.AsyncState.Y"/>
</x></typedef>
	<typedef path="interlude.Trio" params="X:Y:Z" file="src/interlude/DS.hx" module="interlude.DS"><x path="interlude.ds.Trio">
	<c path="interlude.Trio.X"/>
	<c path="interlude.Trio.Y"/>
	<c path="interlude.Trio.Z"/>
</x></typedef>
	<typedef path="interlude.Unit" params="" file="src/interlude/DS.hx" module="interlude.DS"><e path="interlude.ds.Unit"/></typedef>
	<typedef path="interlude.Weighted" params="X" file="src/interlude/DS.hx" module="interlude.DS"><x path="interlude.ds.Weighted"><c path="interlude.Weighted.X"/></x></typedef>
	<typedef path="interlude.EitherTools" params="" file="src/interlude/DS.hx" module="interlude.DS">
		<c path="interlude.ds.EitherTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.MapTools" params="" file="src/interlude/DS.hx" module="interlude.DS">
		<c path="interlude.ds.MapTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.NullTools" params="" file="src/interlude/DS.hx" module="interlude.DS">
		<c path="interlude.ds.NullTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.OptionTools" params="" file="src/interlude/DS.hx" module="interlude.DS">
		<c path="interlude.ds.OptionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.OutcomeTools" params="" file="src/interlude/DS.hx" module="interlude.DS">
		<c path="interlude.ds.OutcomeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.WeightedTools" params="" file="src/interlude/DS.hx" module="interlude.DS">
		<c path="interlude.ds.WeightedTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.Trampoline" params="X" file="src/interlude/Func.hx" module="interlude.Func"><e path="interlude.func.Trampoline"><c path="interlude.Trampoline.X"/></e></typedef>
	<typedef path="interlude.Curry2" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.Curry2"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.Curry3" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.Curry3"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.Curry4" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.Curry4"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.Curry5" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.Curry5"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.Curry6" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.Curry6"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.FunctionTools" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.FunctionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.ValueTools" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.ValueTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.TrampolineTools" params="" file="src/interlude/Func.hx" module="interlude.Func">
		<c path="interlude.func.TrampolineTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.IterableTools" params="" file="src/interlude/Iter.hx" module="interlude.Iter">
		<c path="interlude.iter.IterableTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.IteratorTools" params="" file="src/interlude/Iter.hx" module="interlude.Iter">
		<c path="interlude.iter.IteratorTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.KVIterableTools" params="" file="src/interlude/Iter.hx" module="interlude.Iter">
		<c path="interlude.iter.KeyValueIterableTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.KVIteratorTools" params="" file="src/interlude/Iter.hx" module="interlude.Iter">
		<c path="interlude.iter.KeyValueIteratorTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="interlude.Task" params="X" file="src/interlude/Reactive.hx" module="interlude.Reactive"><c path="interlude.reactive.Task"><c path="interlude.Task.X"/></c></typedef>
	<typedef path="interlude.Surprise" params="X" file="src/interlude/Reactive.hx" module="interlude.Reactive"><t path="interlude.reactive.Surprise"><c path="interlude.Surprise.X"/></t></typedef>
	<typedef path="interlude.Observable" params="X" file="src/interlude/Reactive.hx" module="interlude.Reactive"><c path="interlude.reactive.Observable"><c path="interlude.Observable.X"/></c></typedef>
	<abstract path="interlude.ds.Array1" params="A" file="src/interlude/ds/Array1.hx">
		<from><icast><t path="Pair">
	<c path="interlude.ds.Array1.A"/>
	<c path="Array"><c path="interlude.ds.Array1.A"/></c>
</t></icast></from>
		<this><t path="Pair">
	<c path="interlude.ds.Array1.A"/>
	<c path="Array"><c path="interlude.ds.Array1.A"/></c>
</t></this>
		<to>
			<icast field="toArray"><c path="Array"><c path="interlude.ds.Array1.A"/></c></icast>
			<icast field="toIterable"><a><iterator set="method"><f a=""><t path="Iterator"><c path="interlude.ds.Array1.A"/></t></f></iterator></a></icast>
			<icast field="toIterable1"><x path="interlude.ds.Iterable1"><c path="interlude.ds.Array1.A"/></x></icast>
		</to>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="interlude.ds._Array1.Array1_Impl_" params="" file="src/interlude/ds/Array1.hx" private="1" module="interlude.ds.Array1" final="1">
	<head public="1" get="accessor" set="null" static="1"><c path="interlude.ds.Array1.A"/></head>
	<tail public="1" get="accessor" set="null" static="1"><c path="Array"><c path="interlude.ds.Array1.A"/></c></tail>
	<get_head get="inline" set="null" line="9" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="interlude.ds.Array1.A"/>
</f></get_head>
	<get_tail get="inline" set="null" line="12" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="Array"><c path="interlude.ds.Array1.A"/></c>
</f></get_tail>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="arr1">
			<t path="Pair">
				<c path="interlude.ds.Array1.A"/>
				<c path="Array"><c path="interlude.ds.Array1.A"/></c>
			</t>
			<x path="interlude.ds.Array1"><c path="interlude.ds.Array1.A"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<first public="1" get="inline" set="null" line="18" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="interlude.ds.Array1.A"/>
</f></first>
	<last public="1" set="method" line="21" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="interlude.ds.Array1.A"/>
</f></last>
	<get set="method" line="25" static="1">
		<f a="this:index">
			<t path="Pair">
				<c path="interlude.ds.Array1.A"/>
				<c path="Array"><c path="interlude.ds.Array1.A"/></c>
			</t>
			<x path="Int"/>
			<c path="interlude.ds.Array1.A"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set set="method" line="29" static="1">
		<f a="this:index:value">
			<t path="Pair">
				<c path="interlude.ds.Array1.A"/>
				<c path="Array"><c path="interlude.ds.Array1.A"/></c>
			</t>
			<x path="Int"/>
			<c path="interlude.ds.Array1.A"/>
			<c path="interlude.ds.Array1.A"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<iterator public="1" set="method" line="33" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<t path="Iterator"><c path="interlude.ds.Array1.A"/></t>
</f></iterator>
	<toArray public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="Pair">
				<c path="interlude.ds.Array1.A"/>
				<c path="Array"><c path="interlude.ds.Array1.A"/></c>
			</t>
			<c path="Array"><c path="interlude.ds.Array1.A"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<toIterable public="1" set="method" line="47" static="1">
		<f a="this">
			<t path="Pair">
				<c path="interlude.ds.Array1.A"/>
				<c path="Array"><c path="interlude.ds.Array1.A"/></c>
			</t>
			<t path="Iterable"><c path="interlude.ds.Array1.A"/></t>
		</f>
		<meta><m n=":to"/></meta>
	</toIterable>
	<toIterable1 public="1" set="method" line="51" static="1">
		<f a="this">
			<t path="Pair">
				<c path="interlude.ds.Array1.A"/>
				<c path="Array"><c path="interlude.ds.Array1.A"/></c>
			</t>
			<t path="Iterable1"><c path="interlude.ds.Array1.A"/></t>
		</f>
		<meta><m n=":to"/></meta>
	</toIterable1>
	<flatMap1 public="1" params="B" set="method" line="54" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<f a="">
		<c path="interlude.ds.Array1.A"/>
		<x path="interlude.ds.Array1"><c path="flatMap1.B"/></x>
	</f>
	<x path="interlude.ds.Array1"><c path="flatMap1.B"/></x>
</f></flatMap1>
	<map1 public="1" params="B" set="method" line="61" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<f a="">
		<c path="interlude.ds.Array1.A"/>
		<c path="map1.B"/>
	</f>
	<x path="interlude.ds.Array1"><c path="map1.B"/></x>
</f></map1>
	<flatten public="1" params="A" set="method" line="65" static="1"><f a="aas">
	<x path="interlude.ds.Array1"><x path="interlude.ds.Array1"><c path="flatten.A"/></x></x>
	<x path="interlude.ds.Array1"><c path="flatten.A"/></x>
</f></flatten>
	<from1 public="1" params="A" set="method" line="71" static="1"><f a="fst:rest">
	<c path="from1.A"/>
	<x path="haxe.Rest"><c path="from1.A"/></x>
	<x path="interlude.ds.Array1"><c path="from1.A"/></x>
</f></from1>
	<array1With public="1" params="A" set="method" line="74" static="1"><f a="head:tail">
	<c path="array1With.A"/>
	<c path="Array"><c path="array1With.A"/></c>
	<x path="interlude.ds.Array1"><c path="array1With.A"/></x>
</f></array1With>
	<asArray1 public="1" params="A" set="method" line="77" static="1"><f a="as">
	<t path="Pair">
		<c path="asArray1.A"/>
		<c path="Array"><c path="asArray1.A"/></c>
	</t>
	<x path="interlude.ds.Array1"><c path="asArray1.A"/></x>
</f></asArray1>
</class></impl>
	</abstract>
	<class path="interlude.ds._Array1.Array1_Impl_" params="" file="src/interlude/ds/Array1.hx" private="1" module="interlude.ds.Array1" final="1">
		<head public="1" get="accessor" set="null" static="1"><c path="interlude.ds.Array1.A"/></head>
		<tail public="1" get="accessor" set="null" static="1"><c path="Array"><c path="interlude.ds.Array1.A"/></c></tail>
		<get_head get="inline" set="null" line="9" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="interlude.ds.Array1.A"/>
</f></get_head>
		<get_tail get="inline" set="null" line="12" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="Array"><c path="interlude.ds.Array1.A"/></c>
</f></get_tail>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="arr1">
				<t path="Pair">
					<c path="interlude.ds.Array1.A"/>
					<c path="Array"><c path="interlude.ds.Array1.A"/></c>
				</t>
				<x path="interlude.ds.Array1"><c path="interlude.ds.Array1.A"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<first public="1" get="inline" set="null" line="18" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="interlude.ds.Array1.A"/>
</f></first>
		<last public="1" set="method" line="21" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<c path="interlude.ds.Array1.A"/>
</f></last>
		<get set="method" line="25" static="1">
			<f a="this:index">
				<t path="Pair">
					<c path="interlude.ds.Array1.A"/>
					<c path="Array"><c path="interlude.ds.Array1.A"/></c>
				</t>
				<x path="Int"/>
				<c path="interlude.ds.Array1.A"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set set="method" line="29" static="1">
			<f a="this:index:value">
				<t path="Pair">
					<c path="interlude.ds.Array1.A"/>
					<c path="Array"><c path="interlude.ds.Array1.A"/></c>
				</t>
				<x path="Int"/>
				<c path="interlude.ds.Array1.A"/>
				<c path="interlude.ds.Array1.A"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<iterator public="1" set="method" line="33" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<t path="Iterator"><c path="interlude.ds.Array1.A"/></t>
</f></iterator>
		<toArray public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="Pair">
					<c path="interlude.ds.Array1.A"/>
					<c path="Array"><c path="interlude.ds.Array1.A"/></c>
				</t>
				<c path="Array"><c path="interlude.ds.Array1.A"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<toIterable public="1" set="method" line="47" static="1">
			<f a="this">
				<t path="Pair">
					<c path="interlude.ds.Array1.A"/>
					<c path="Array"><c path="interlude.ds.Array1.A"/></c>
				</t>
				<t path="Iterable"><c path="interlude.ds.Array1.A"/></t>
			</f>
			<meta><m n=":to"/></meta>
		</toIterable>
		<toIterable1 public="1" set="method" line="51" static="1">
			<f a="this">
				<t path="Pair">
					<c path="interlude.ds.Array1.A"/>
					<c path="Array"><c path="interlude.ds.Array1.A"/></c>
				</t>
				<t path="Iterable1"><c path="interlude.ds.Array1.A"/></t>
			</f>
			<meta><m n=":to"/></meta>
		</toIterable1>
		<flatMap1 public="1" params="B" set="method" line="54" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<f a="">
		<c path="interlude.ds.Array1.A"/>
		<x path="interlude.ds.Array1"><c path="flatMap1.B"/></x>
	</f>
	<x path="interlude.ds.Array1"><c path="flatMap1.B"/></x>
</f></flatMap1>
		<map1 public="1" params="B" set="method" line="61" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Array1.A"/>
		<c path="Array"><c path="interlude.ds.Array1.A"/></c>
	</t>
	<f a="">
		<c path="interlude.ds.Array1.A"/>
		<c path="map1.B"/>
	</f>
	<x path="interlude.ds.Array1"><c path="map1.B"/></x>
</f></map1>
		<flatten public="1" params="A" set="method" line="65" static="1"><f a="aas">
	<x path="interlude.ds.Array1"><x path="interlude.ds.Array1"><c path="flatten.A"/></x></x>
	<x path="interlude.ds.Array1"><c path="flatten.A"/></x>
</f></flatten>
		<from1 public="1" params="A" set="method" line="71" static="1"><f a="fst:rest">
	<c path="from1.A"/>
	<x path="haxe.Rest"><c path="from1.A"/></x>
	<x path="interlude.ds.Array1"><c path="from1.A"/></x>
</f></from1>
		<array1With public="1" params="A" set="method" line="74" static="1"><f a="head:tail">
	<c path="array1With.A"/>
	<c path="Array"><c path="array1With.A"/></c>
	<x path="interlude.ds.Array1"><c path="array1With.A"/></x>
</f></array1With>
		<asArray1 public="1" params="A" set="method" line="77" static="1"><f a="as">
	<t path="Pair">
		<c path="asArray1.A"/>
		<c path="Array"><c path="asArray1.A"/></c>
	</t>
	<x path="interlude.ds.Array1"><c path="asArray1.A"/></x>
</f></asArray1>
	</class>
	<abstract path="interlude.ds.AsyncState" params="X:A" file="src/interlude/ds/AsyncState.hx">
		<from><icast><f a="">
	<c path="interlude.ds.AsyncState.X"/>
	<t path="Task"><t path="Pair">
	<c path="interlude.ds.AsyncState.A"/>
	<c path="interlude.ds.AsyncState.X"/>
</t></t>
</f></icast></from>
		<this><f a="">
	<c path="interlude.ds.AsyncState.X"/>
	<t path="Task"><t path="Pair">
	<c path="interlude.ds.AsyncState.A"/>
	<c path="interlude.ds.AsyncState.X"/>
</t></t>
</f></this>
		<to><icast><f a="">
	<c path="interlude.ds.AsyncState.X"/>
	<t path="Task"><t path="Pair">
	<c path="interlude.ds.AsyncState.A"/>
	<c path="interlude.ds.AsyncState.X"/>
</t></t>
</f></icast></to>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":forward"/>
			<m n=":callable"/>
		</meta>
		<impl><class path="interlude.ds._AsyncState.AsyncState_Impl_" params="" file="src/interlude/ds/AsyncState.hx" private="1" module="interlude.ds.AsyncState" final="1">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a="as">
			<f a="">
				<c path="interlude.ds.AsyncState.X"/>
				<t path="Task"><t path="Pair">
	<c path="interlude.ds.AsyncState.A"/>
	<c path="interlude.ds.AsyncState.X"/>
</t></t>
			</f>
			<x path="interlude.ds.AsyncState">
				<c path="interlude.ds.AsyncState.X"/>
				<c path="interlude.ds.AsyncState.A"/>
			</x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<ap public="1" params="X:A:B" set="method" line="14" static="1"><f a="fn:s">
	<x path="interlude.ds.AsyncState">
		<c path="ap.X"/>
		<f a="">
			<c path="ap.A"/>
			<c path="ap.B"/>
		</f>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="ap.X"/>
		<c path="ap.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="ap.X"/>
		<c path="ap.B"/>
	</x>
</f></ap>
	<asAsyncState public="1" params="X:A" set="method" line="17" static="1"><f a="a">
	<c path="asAsyncState.A"/>
	<x path="interlude.ds.AsyncState">
		<c path="asAsyncState.X"/>
		<c path="asAsyncState.A"/>
	</x>
</f></asAsyncState>
	<eval public="1" params="X:A" set="method" line="20" static="1"><f a="s:x">
	<x path="interlude.ds.AsyncState">
		<c path="eval.X"/>
		<c path="eval.A"/>
	</x>
	<c path="eval.X"/>
	<t path="Task"><c path="eval.A"/></t>
</f></eval>
	<filter public="1" params="X:A" set="method" line="23" static="1"><f a="s:predicate">
	<x path="interlude.ds.AsyncState">
		<c path="filter.X"/>
		<c path="filter.A"/>
	</x>
	<f a="">
		<c path="filter.X"/>
		<x path="Bool"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="filter.X"/>
		<t path="Option"><c path="filter.A"/></t>
	</x>
</f></filter>
	<filterMap public="1" params="X:A:B" set="method" line="28" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.AsyncState">
		<c path="filterMap.X"/>
		<c path="filterMap.A"/>
	</x>
	<f a="">
		<c path="filterMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="filterMap.X"/>
		<t path="Option"><c path="filterMap.B"/></t>
	</x>
</f></filterMap>
	<filterFMap public="1" params="X:A:B" set="method" line="33" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.AsyncState">
		<c path="filterFMap.X"/>
		<c path="filterFMap.A"/>
	</x>
	<f a="">
		<c path="filterFMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFMap.A"/>
		<x path="interlude.ds.AsyncState">
			<c path="filterFMap.X"/>
			<c path="filterFMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="filterFMap.X"/>
		<t path="Option"><c path="filterFMap.B"/></t>
	</x>
</f></filterFMap>
	<flatMap public="1" params="X:A:B" set="method" line="38" static="1"><f a="s:fn">
	<x path="interlude.ds.AsyncState">
		<c path="flatMap.X"/>
		<c path="flatMap.A"/>
	</x>
	<f a="">
		<c path="flatMap.A"/>
		<x path="interlude.ds.AsyncState">
			<c path="flatMap.X"/>
			<c path="flatMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="flatMap.X"/>
		<c path="flatMap.B"/>
	</x>
</f></flatMap>
	<flatten public="1" params="X:A" set="method" line="41" static="1"><f a="s">
	<x path="interlude.ds.AsyncState">
		<c path="flatten.X"/>
		<x path="interlude.ds.AsyncState">
			<c path="flatten.X"/>
			<c path="flatten.A"/>
		</x>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="flatten.X"/>
		<c path="flatten.A"/>
	</x>
</f></flatten>
	<local public="1" params="X:A" set="method" line="44" static="1"><f a="s:fn">
	<x path="interlude.ds.AsyncState">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
	<f a="">
		<c path="local.X"/>
		<c path="local.X"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
</f></local>
	<map public="1" params="X:A:B" set="method" line="47" static="1"><f a="s:fn">
	<x path="interlude.ds.AsyncState">
		<c path="map.X"/>
		<c path="map.A"/>
	</x>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="map.X"/>
		<c path="map.B"/>
	</x>
</f></map>
	<run public="1" params="X:A" set="method" line="50" static="1"><f a="s:x">
	<x path="interlude.ds.AsyncState">
		<c path="run.X"/>
		<c path="run.A"/>
	</x>
	<c path="run.X"/>
	<t path="Task"><c path="run.X"/></t>
</f></run>
	<zip public="1" params="X:A:B" set="method" line="53" static="1"><f a="sa:sb">
	<x path="interlude.ds.AsyncState">
		<c path="zip.X"/>
		<c path="zip.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zip.X"/>
		<c path="zip.B"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zip.X"/>
		<t path="Pair">
			<c path="zip.A"/>
			<c path="zip.B"/>
		</t>
	</x>
</f></zip>
	<zipWith public="1" params="X:A:B:Z" set="method" line="56" static="1"><f a="sa:sb:fn">
	<x path="interlude.ds.AsyncState">
		<c path="zipWith.X"/>
		<c path="zipWith.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith.X"/>
		<c path="zipWith.B"/>
	</x>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.Z"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith.X"/>
		<c path="zipWith.Z"/>
	</x>
</f></zipWith>
	<zipWith3 public="1" params="X:A:B:C:Z" set="method" line="59" static="1"><f a="sa:sb:sc:fn">
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.B"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.C"/>
	</x>
	<f a="::">
		<c path="zipWith3.A"/>
		<c path="zipWith3.B"/>
		<c path="zipWith3.C"/>
		<c path="zipWith3.Z"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.Z"/>
	</x>
</f></zipWith3>
</class></impl>
	</abstract>
	<class path="interlude.ds._AsyncState.AsyncState_Impl_" params="" file="src/interlude/ds/AsyncState.hx" private="1" module="interlude.ds.AsyncState" final="1">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a="as">
				<f a="">
					<c path="interlude.ds.AsyncState.X"/>
					<t path="Task"><t path="Pair">
	<c path="interlude.ds.AsyncState.A"/>
	<c path="interlude.ds.AsyncState.X"/>
</t></t>
				</f>
				<x path="interlude.ds.AsyncState">
					<c path="interlude.ds.AsyncState.X"/>
					<c path="interlude.ds.AsyncState.A"/>
				</x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<ap public="1" params="X:A:B" set="method" line="14" static="1"><f a="fn:s">
	<x path="interlude.ds.AsyncState">
		<c path="ap.X"/>
		<f a="">
			<c path="ap.A"/>
			<c path="ap.B"/>
		</f>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="ap.X"/>
		<c path="ap.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="ap.X"/>
		<c path="ap.B"/>
	</x>
</f></ap>
		<asAsyncState public="1" params="X:A" set="method" line="17" static="1"><f a="a">
	<c path="asAsyncState.A"/>
	<x path="interlude.ds.AsyncState">
		<c path="asAsyncState.X"/>
		<c path="asAsyncState.A"/>
	</x>
</f></asAsyncState>
		<eval public="1" params="X:A" set="method" line="20" static="1"><f a="s:x">
	<x path="interlude.ds.AsyncState">
		<c path="eval.X"/>
		<c path="eval.A"/>
	</x>
	<c path="eval.X"/>
	<t path="Task"><c path="eval.A"/></t>
</f></eval>
		<filter public="1" params="X:A" set="method" line="23" static="1"><f a="s:predicate">
	<x path="interlude.ds.AsyncState">
		<c path="filter.X"/>
		<c path="filter.A"/>
	</x>
	<f a="">
		<c path="filter.X"/>
		<x path="Bool"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="filter.X"/>
		<t path="Option"><c path="filter.A"/></t>
	</x>
</f></filter>
		<filterMap public="1" params="X:A:B" set="method" line="28" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.AsyncState">
		<c path="filterMap.X"/>
		<c path="filterMap.A"/>
	</x>
	<f a="">
		<c path="filterMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="filterMap.X"/>
		<t path="Option"><c path="filterMap.B"/></t>
	</x>
</f></filterMap>
		<filterFMap public="1" params="X:A:B" set="method" line="33" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.AsyncState">
		<c path="filterFMap.X"/>
		<c path="filterFMap.A"/>
	</x>
	<f a="">
		<c path="filterFMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFMap.A"/>
		<x path="interlude.ds.AsyncState">
			<c path="filterFMap.X"/>
			<c path="filterFMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="filterFMap.X"/>
		<t path="Option"><c path="filterFMap.B"/></t>
	</x>
</f></filterFMap>
		<flatMap public="1" params="X:A:B" set="method" line="38" static="1"><f a="s:fn">
	<x path="interlude.ds.AsyncState">
		<c path="flatMap.X"/>
		<c path="flatMap.A"/>
	</x>
	<f a="">
		<c path="flatMap.A"/>
		<x path="interlude.ds.AsyncState">
			<c path="flatMap.X"/>
			<c path="flatMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="flatMap.X"/>
		<c path="flatMap.B"/>
	</x>
</f></flatMap>
		<flatten public="1" params="X:A" set="method" line="41" static="1"><f a="s">
	<x path="interlude.ds.AsyncState">
		<c path="flatten.X"/>
		<x path="interlude.ds.AsyncState">
			<c path="flatten.X"/>
			<c path="flatten.A"/>
		</x>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="flatten.X"/>
		<c path="flatten.A"/>
	</x>
</f></flatten>
		<local public="1" params="X:A" set="method" line="44" static="1"><f a="s:fn">
	<x path="interlude.ds.AsyncState">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
	<f a="">
		<c path="local.X"/>
		<c path="local.X"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
</f></local>
		<map public="1" params="X:A:B" set="method" line="47" static="1"><f a="s:fn">
	<x path="interlude.ds.AsyncState">
		<c path="map.X"/>
		<c path="map.A"/>
	</x>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="map.X"/>
		<c path="map.B"/>
	</x>
</f></map>
		<run public="1" params="X:A" set="method" line="50" static="1"><f a="s:x">
	<x path="interlude.ds.AsyncState">
		<c path="run.X"/>
		<c path="run.A"/>
	</x>
	<c path="run.X"/>
	<t path="Task"><c path="run.X"/></t>
</f></run>
		<zip public="1" params="X:A:B" set="method" line="53" static="1"><f a="sa:sb">
	<x path="interlude.ds.AsyncState">
		<c path="zip.X"/>
		<c path="zip.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zip.X"/>
		<c path="zip.B"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zip.X"/>
		<t path="Pair">
			<c path="zip.A"/>
			<c path="zip.B"/>
		</t>
	</x>
</f></zip>
		<zipWith public="1" params="X:A:B:Z" set="method" line="56" static="1"><f a="sa:sb:fn">
	<x path="interlude.ds.AsyncState">
		<c path="zipWith.X"/>
		<c path="zipWith.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith.X"/>
		<c path="zipWith.B"/>
	</x>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.Z"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith.X"/>
		<c path="zipWith.Z"/>
	</x>
</f></zipWith>
		<zipWith3 public="1" params="X:A:B:C:Z" set="method" line="59" static="1"><f a="sa:sb:sc:fn">
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.A"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.B"/>
	</x>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.C"/>
	</x>
	<f a="::">
		<c path="zipWith3.A"/>
		<c path="zipWith3.B"/>
		<c path="zipWith3.C"/>
		<c path="zipWith3.Z"/>
	</f>
	<x path="interlude.ds.AsyncState">
		<c path="zipWith3.X"/>
		<c path="zipWith3.Z"/>
	</x>
</f></zipWith3>
	</class>
	<class path="interlude.ds.EitherTools" params="" file="src/interlude/ds/EitherTools.hx">
		<ap public="1" params="A:B:C" set="method" line="6" static="1"><f a="fn:e">
	<t path="Either">
		<c path="ap.A"/>
		<f a="">
			<c path="ap.B"/>
			<c path="ap.C"/>
		</f>
	</t>
	<t path="Either">
		<c path="ap.A"/>
		<c path="ap.B"/>
	</t>
	<t path="Either">
		<c path="ap.A"/>
		<c path="ap.C"/>
	</t>
</f></ap>
		<asLeft public="1" params="A:B" get="inline" set="null" line="9" static="1"><f a="a">
	<c path="asLeft.A"/>
	<t path="Either">
		<c path="asLeft.A"/>
		<c path="asLeft.B"/>
	</t>
</f></asLeft>
		<asRight public="1" params="A:B" get="inline" set="null" line="12" static="1"><f a="b">
	<c path="asRight.B"/>
	<t path="Either">
		<c path="asRight.A"/>
		<c path="asRight.B"/>
	</t>
</f></asRight>
		<flatMap public="1" params="A:B:C" set="method" line="15" static="1"><f a="e:fn">
	<t path="Either">
		<c path="flatMap.A"/>
		<c path="flatMap.B"/>
	</t>
	<f a="">
		<c path="flatMap.B"/>
		<t path="Either">
			<c path="flatMap.A"/>
			<c path="flatMap.C"/>
		</t>
	</f>
	<t path="Either">
		<c path="flatMap.A"/>
		<c path="flatMap.C"/>
	</t>
</f></flatMap>
		<lefts public="1" params="A:B" set="method" line="20" static="1"><f a="es">
	<t path="Iterable"><t path="Either">
	<c path="lefts.A"/>
	<c path="lefts.B"/>
</t></t>
	<t path="Iterable"><c path="lefts.A"/></t>
</f></lefts>
		<map public="1" params="A:B:C" set="method" line="23" static="1"><f a="e:f">
	<t path="Either">
		<c path="map.A"/>
		<c path="map.B"/>
	</t>
	<f a="">
		<c path="map.B"/>
		<c path="map.C"/>
	</f>
	<t path="Either">
		<c path="map.A"/>
		<c path="map.C"/>
	</t>
</f></map>
		<match public="1" params="A:B:C" set="method" line="28" static="1"><f a="e:whenLeft:whenRight">
	<t path="Either">
		<c path="match.A"/>
		<c path="match.B"/>
	</t>
	<f a="">
		<c path="match.A"/>
		<c path="match.C"/>
	</f>
	<f a="">
		<c path="match.B"/>
		<c path="match.C"/>
	</f>
	<c path="match.C"/>
</f></match>
		<mutate public="1" params="A:B" set="method" line="33" static="1"><f a="e:whenLeft:whenRight">
	<t path="Either">
		<c path="mutate.A"/>
		<c path="mutate.B"/>
	</t>
	<f a="">
		<c path="mutate.A"/>
		<x path="Void"/>
	</f>
	<f a="">
		<c path="mutate.B"/>
		<x path="Void"/>
	</f>
	<t path="Either">
		<c path="mutate.A"/>
		<c path="mutate.B"/>
	</t>
</f></mutate>
		<mutate_ public="1" params="A:B" set="method" line="41" static="1"><f a="e:whenRight">
	<t path="Either">
		<c path="mutate_.A"/>
		<c path="mutate_.B"/>
	</t>
	<f a="">
		<c path="mutate_.B"/>
		<x path="Void"/>
	</f>
	<t path="Either">
		<c path="mutate_.A"/>
		<c path="mutate_.B"/>
	</t>
</f></mutate_>
		<rights public="1" params="A:B" set="method" line="49" static="1"><f a="es">
	<t path="Iterable"><t path="Either">
	<c path="rights.A"/>
	<c path="rights.B"/>
</t></t>
	<t path="Iterable"><c path="rights.B"/></t>
</f></rights>
		<toNullable public="1" params="A:B" set="method" line="52" static="1"><f a="e">
	<t path="Either">
		<c path="toNullable.A"/>
		<c path="toNullable.B"/>
	</t>
	<x path="Null"><c path="toNullable.B"/></x>
</f></toNullable>
		<toOption public="1" params="A:B" set="method" line="57" static="1"><f a="e">
	<t path="Either">
		<c path="toOption.A"/>
		<c path="toOption.B"/>
	</t>
	<t path="Option"><c path="toOption.B"/></t>
</f></toOption>
		<toOutcome public="1" params="A:B" set="method" line="62" static="1"><f a="e:?pos">
	<t path="Either">
		<c path="toOutcome.A"/>
		<c path="toOutcome.B"/>
	</t>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<t path="Outcome"><c path="toOutcome.B"/></t>
</f></toOutcome>
		<zip public="1" params="X:A:B" set="method" line="67" static="1"><f a="eA:eB">
	<t path="Either">
		<c path="zip.X"/>
		<c path="zip.A"/>
	</t>
	<t path="Either">
		<c path="zip.X"/>
		<c path="zip.B"/>
	</t>
	<t path="Either">
		<c path="zip.X"/>
		<t path="Pair">
			<c path="zip.A"/>
			<c path="zip.B"/>
		</t>
	</t>
</f></zip>
		<zipWith public="1" params="X:A:B:C" set="method" line="70" static="1"><f a="eA:eB:fn">
	<t path="Either">
		<c path="zipWith.X"/>
		<c path="zipWith.A"/>
	</t>
	<t path="Either">
		<c path="zipWith.X"/>
		<c path="zipWith.B"/>
	</t>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<t path="Either">
		<c path="zipWith.X"/>
		<c path="zipWith.C"/>
	</t>
</f></zipWith>
		<meta>
			<m n=":publicFields"/>
			<m n=":nullSafety"><e>Strict</e></m>
		</meta>
	</class>
	<abstract path="interlude.ds.Iterable1" params="A" file="src/interlude/ds/Iterable1.hx">
		<from><icast><t path="Pair">
	<c path="interlude.ds.Iterable1.A"/>
	<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
</t></icast></from>
		<this><t path="Pair">
	<c path="interlude.ds.Iterable1.A"/>
	<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
</t></this>
		<to>
			<icast field="toIterable"><a><iterator set="method"><f a=""><t path="Iterator"><c path="interlude.ds.Iterable1.A"/></t></f></iterator></a></icast>
			<icast field="toArray1"><x path="interlude.ds.Array1"><c path="interlude.ds.Iterable1.A"/></x></icast>
			<icast field="toArray"><c path="Array"><c path="interlude.ds.Iterable1.A"/></c></icast>
		</to>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="interlude.ds._Iterable1.Iterable1_Impl_" params="" file="src/interlude/ds/Iterable1.hx" private="1" module="interlude.ds.Iterable1" final="1">
	<head public="1" get="accessor" set="null" static="1"><c path="interlude.ds.Iterable1.A"/></head>
	<tail public="1" get="accessor" set="null" static="1"><t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t></tail>
	<get_head get="inline" set="null" line="9" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<c path="interlude.ds.Iterable1.A"/>
</f></get_head>
	<get_tail get="inline" set="null" line="12" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
</f></get_tail>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="it">
			<t path="Pair">
				<c path="interlude.ds.Iterable1.A"/>
				<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
			</t>
			<x path="interlude.ds.Iterable1"><c path="interlude.ds.Iterable1.A"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<first public="1" get="inline" set="null" line="18" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<c path="interlude.ds.Iterable1.A"/>
</f></first>
	<last public="1" set="method" line="21" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<c path="interlude.ds.Iterable1.A"/>
</f></last>
	<iterator public="1" set="method" line="28" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<t path="Iterator"><c path="interlude.ds.Iterable1.A"/></t>
</f></iterator>
	<toIterable public="1" get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="Pair">
				<c path="interlude.ds.Iterable1.A"/>
				<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
			</t>
			<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
		</f>
		<meta><m n=":to"/></meta>
	</toIterable>
	<toArray1 public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="Pair">
				<c path="interlude.ds.Iterable1.A"/>
				<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
			</t>
			<t path="Array1"><c path="interlude.ds.Iterable1.A"/></t>
		</f>
		<meta><m n=":to"/></meta>
	</toArray1>
	<toArray public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<t path="Pair">
				<c path="interlude.ds.Iterable1.A"/>
				<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
			</t>
			<c path="Array"><c path="interlude.ds.Iterable1.A"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<flatMap1 public="1" params="B" set="method" line="48" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<f a="">
		<c path="interlude.ds.Iterable1.A"/>
		<x path="interlude.ds.Iterable1"><c path="flatMap1.B"/></x>
	</f>
	<x path="interlude.ds.Iterable1"><c path="flatMap1.B"/></x>
</f></flatMap1>
	<map1 public="1" params="B" set="method" line="54" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<f a="">
		<c path="interlude.ds.Iterable1.A"/>
		<c path="map1.B"/>
	</f>
	<x path="interlude.ds.Iterable1"><c path="map1.B"/></x>
</f></map1>
	<flatten public="1" params="A" set="method" line="58" static="1"><f a="aas">
	<x path="interlude.ds.Iterable1"><x path="interlude.ds.Iterable1"><c path="flatten.A"/></x></x>
	<x path="interlude.ds.Iterable1"><c path="flatten.A"/></x>
</f></flatten>
	<from1 public="1" params="A" set="method" line="63" static="1"><f a="fst:rest">
	<c path="from1.A"/>
	<x path="haxe.Rest"><c path="from1.A"/></x>
	<x path="interlude.ds.Iterable1"><c path="from1.A"/></x>
</f></from1>
	<iterable1With public="1" params="A" set="method" line="66" static="1"><f a="head:tail">
	<c path="iterable1With.A"/>
	<t path="Iterable"><c path="iterable1With.A"/></t>
	<x path="interlude.ds.Iterable1"><c path="iterable1With.A"/></x>
</f></iterable1With>
	<asIterable1 public="1" params="A" set="method" line="69" static="1"><f a="as">
	<t path="Pair">
		<c path="asIterable1.A"/>
		<t path="Iterable"><c path="asIterable1.A"/></t>
	</t>
	<x path="interlude.ds.Iterable1"><c path="asIterable1.A"/></x>
</f></asIterable1>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="interlude.ds._Iterable1.Iterable1_Impl_" params="" file="src/interlude/ds/Iterable1.hx" private="1" module="interlude.ds.Iterable1" final="1">
		<head public="1" get="accessor" set="null" static="1"><c path="interlude.ds.Iterable1.A"/></head>
		<tail public="1" get="accessor" set="null" static="1"><t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t></tail>
		<get_head get="inline" set="null" line="9" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<c path="interlude.ds.Iterable1.A"/>
</f></get_head>
		<get_tail get="inline" set="null" line="12" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
</f></get_tail>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="it">
				<t path="Pair">
					<c path="interlude.ds.Iterable1.A"/>
					<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
				</t>
				<x path="interlude.ds.Iterable1"><c path="interlude.ds.Iterable1.A"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<first public="1" get="inline" set="null" line="18" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<c path="interlude.ds.Iterable1.A"/>
</f></first>
		<last public="1" set="method" line="21" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<c path="interlude.ds.Iterable1.A"/>
</f></last>
		<iterator public="1" set="method" line="28" static="1"><f a="this">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<t path="Iterator"><c path="interlude.ds.Iterable1.A"/></t>
</f></iterator>
		<toIterable public="1" get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="Pair">
					<c path="interlude.ds.Iterable1.A"/>
					<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
				</t>
				<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
			</f>
			<meta><m n=":to"/></meta>
		</toIterable>
		<toArray1 public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="Pair">
					<c path="interlude.ds.Iterable1.A"/>
					<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
				</t>
				<t path="Array1"><c path="interlude.ds.Iterable1.A"/></t>
			</f>
			<meta><m n=":to"/></meta>
		</toArray1>
		<toArray public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<t path="Pair">
					<c path="interlude.ds.Iterable1.A"/>
					<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
				</t>
				<c path="Array"><c path="interlude.ds.Iterable1.A"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<flatMap1 public="1" params="B" set="method" line="48" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<f a="">
		<c path="interlude.ds.Iterable1.A"/>
		<x path="interlude.ds.Iterable1"><c path="flatMap1.B"/></x>
	</f>
	<x path="interlude.ds.Iterable1"><c path="flatMap1.B"/></x>
</f></flatMap1>
		<map1 public="1" params="B" set="method" line="54" static="1"><f a="this:fn">
	<t path="Pair">
		<c path="interlude.ds.Iterable1.A"/>
		<t path="Iterable"><c path="interlude.ds.Iterable1.A"/></t>
	</t>
	<f a="">
		<c path="interlude.ds.Iterable1.A"/>
		<c path="map1.B"/>
	</f>
	<x path="interlude.ds.Iterable1"><c path="map1.B"/></x>
</f></map1>
		<flatten public="1" params="A" set="method" line="58" static="1"><f a="aas">
	<x path="interlude.ds.Iterable1"><x path="interlude.ds.Iterable1"><c path="flatten.A"/></x></x>
	<x path="interlude.ds.Iterable1"><c path="flatten.A"/></x>
</f></flatten>
		<from1 public="1" params="A" set="method" line="63" static="1"><f a="fst:rest">
	<c path="from1.A"/>
	<x path="haxe.Rest"><c path="from1.A"/></x>
	<x path="interlude.ds.Iterable1"><c path="from1.A"/></x>
</f></from1>
		<iterable1With public="1" params="A" set="method" line="66" static="1"><f a="head:tail">
	<c path="iterable1With.A"/>
	<t path="Iterable"><c path="iterable1With.A"/></t>
	<x path="interlude.ds.Iterable1"><c path="iterable1With.A"/></x>
</f></iterable1With>
		<asIterable1 public="1" params="A" set="method" line="69" static="1"><f a="as">
	<t path="Pair">
		<c path="asIterable1.A"/>
		<t path="Iterable"><c path="asIterable1.A"/></t>
	</t>
	<x path="interlude.ds.Iterable1"><c path="asIterable1.A"/></x>
</f></asIterable1>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="interlude.ds.Lazy" params="A" file="src/interlude/ds/Lazy.hx">
		<any public="1" params="A" get="inline" set="null" line="28" static="1"><f a="l">
	<c path="interlude.ds.Lazy"><c path="any.A"/></c>
	<x path="Bool"/>
</f></any>
		<ap public="1" params="A:B" set="method" line="31" static="1"><f a="fn:a">
	<c path="interlude.ds.Lazy"><f a="">
	<c path="ap.A"/>
	<c path="ap.B"/>
</f></c>
	<c path="interlude.ds.Lazy"><c path="ap.A"/></c>
	<c path="interlude.ds.Lazy"><c path="ap.B"/></c>
</f></ap>
		<asLazy public="1" params="A" get="inline" set="null" line="34" static="1"><f a="a">
	<c path="asLazy.A"/>
	<c path="interlude.ds.Lazy"><c path="asLazy.A"/></c>
</f></asLazy>
		<flatMap public="1" params="A:B" set="method" line="37" static="1"><f a="l:fn">
	<c path="interlude.ds.Lazy"><c path="flatMap.A"/></c>
	<f a="">
		<c path="flatMap.A"/>
		<c path="interlude.ds.Lazy"><c path="flatMap.B"/></c>
	</f>
	<c path="interlude.ds.Lazy"><c path="flatMap.B"/></c>
</f></flatMap>
		<flatten public="1" params="A" set="method" line="40" static="1"><f a="l">
	<c path="interlude.ds.Lazy"><c path="interlude.ds.Lazy"><c path="flatten.A"/></c></c>
	<c path="interlude.ds.Lazy"><c path="flatten.A"/></c>
</f></flatten>
		<map public="1" params="A:B" set="method" line="43" static="1"><f a="l:fn">
	<c path="interlude.ds.Lazy"><c path="map.A"/></c>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<c path="interlude.ds.Lazy"><c path="map.B"/></c>
</f></map>
		<mutate public="1" params="A" get="inline" set="null" line="46" static="1"><f a="l:mutator">
	<c path="interlude.ds.Lazy"><c path="mutate.A"/></c>
	<f a="">
		<c path="mutate.A"/>
		<x path="Void"/>
	</f>
	<c path="interlude.ds.Lazy"><c path="mutate.A"/></c>
</f></mutate>
		<mutate_ public="1" params="A" get="inline" set="null" line="51" static="1"><f a="l:whenEval">
	<c path="interlude.ds.Lazy"><c path="mutate_.A"/></c>
	<f a="">
		<c path="mutate_.A"/>
		<x path="Void"/>
	</f>
	<c path="interlude.ds.Lazy"><c path="mutate_.A"/></c>
</f></mutate_>
		<toArray public="1" params="A" set="method" line="57" static="1"><f a="l">
	<c path="interlude.ds.Lazy"><c path="toArray.A"/></c>
	<c path="Array"><c path="toArray.A"/></c>
</f></toArray>
		<zip public="1" params="A:B" get="inline" set="null" line="60" static="1"><f a="la:lb">
	<c path="interlude.ds.Lazy"><c path="zip.A"/></c>
	<c path="interlude.ds.Lazy"><c path="zip.B"/></c>
	<c path="interlude.ds.Lazy"><t path="Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</t></c>
</f></zip>
		<zipWith public="1" params="A:B:C" set="method" line="63" static="1"><f a="la:lb:fn">
	<c path="interlude.ds.Lazy"><c path="zipWith.A"/></c>
	<c path="interlude.ds.Lazy"><c path="zipWith.B"/></c>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<c path="interlude.ds.Lazy"><c path="zipWith.C"/></c>
</f></zipWith>
		<result public="1" set="null" expr="null">
			<x path="Null"><c path="interlude.ds.Lazy.A"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</result>
		<genValue public="1" set="null"><f a=""><c path="interlude.ds.Lazy.A"/></f></genValue>
		<eval public="1" get="inline" set="null" line="12"><f a=""><c path="interlude.ds.Lazy.A"/></f></eval>
		<toIterable public="1" set="method" line="17"><f a=""><t path="Iterable"><c path="interlude.ds.Lazy.A"/></t></f></toIterable>
		<toString public="1" set="method" line="24"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="8"><f a="genValue">
	<f a=""><c path="interlude.ds.Lazy.A"/></f>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.ds.MapTools" params="" file="src/interlude/ds/MapTools.hx">
		<withKey public="1" params="K:V" get="inline" set="null" line="9" static="1">
			<f a="map:key">
				<c path="haxe.IMap">
					<c path="withKey.K"/>
					<c path="withKey.V"/>
				</c>
				<c path="withKey.K"/>
				<t path="Option"><c path="withKey.V"/></t>
			</f>
			<haxe_doc>Attempts to find `key` in `map`, returning `None` if it's not found</haxe_doc>
		</withKey>
		<withKeyOrInsertNew public="1" params="K:V" set="method" line="13" static="1">
			<f a="map:key:ifNotPresent">
				<c path="haxe.IMap">
					<c path="withKeyOrInsertNew.K"/>
					<c path="withKeyOrInsertNew.V"/>
				</c>
				<c path="withKeyOrInsertNew.K"/>
				<f a=""><c path="withKeyOrInsertNew.V"/></f>
				<c path="withKeyOrInsertNew.V"/>
			</f>
			<haxe_doc>Attempts fo find `key` in `map`, and inserts a generated value if it's not found</haxe_doc>
		</withKeyOrInsertNew>
		<meta>
			<m n=":publicFields"/>
			<m n=":nullSafety"><e>Strict</e></m>
		</meta>
	</class>
	<class path="interlude.ds.NullTools" params="" file="src/interlude/ds/NullTools.hx">
		<toOption public="1" params="A" set="method" line="9" static="1">
			<f a="a">
				<x path="Null"><c path="toOption.A"/></x>
				<t path="Option"><c path="toOption.A"/></t>
			</f>
			<haxe_doc>Converts a nullable value to `Option`</haxe_doc>
		</toOption>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.ds.OptionTools" params="" file="src/interlude/ds/OptionTools.hx">
		<all public="1" params="A" get="inline" set="null" line="6" static="1"><f a="maybe:predicate">
	<t path="Option"><c path="all.A"/></t>
	<f a="">
		<c path="all.A"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></all>
		<any public="1" params="A" set="method" line="9" static="1"><f a="maybe">
	<t path="Option"><c path="any.A"/></t>
	<x path="Bool"/>
</f></any>
		<anyMatch public="1" params="A" set="method" line="14" static="1"><f a="maybe:predicate">
	<t path="Option"><c path="anyMatch.A"/></t>
	<f a="">
		<c path="anyMatch.A"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></anyMatch>
		<ap public="1" params="A:B" set="method" line="19" static="1"><f a="fn:maybe">
	<t path="Option"><f a="">
	<c path="ap.A"/>
	<c path="ap.B"/>
</f></t>
	<t path="Option"><c path="ap.A"/></t>
	<t path="Option"><c path="ap.B"/></t>
</f></ap>
		<asOption public="1" params="A" set="method" line="24" static="1"><f a="a">
	<c path="asOption.A"/>
	<t path="Option"><c path="asOption.A"/></t>
</f></asOption>
		<contains public="1" params="A" set="method" line="28" static="1"><f a="maybe:value">
	<t path="Option"><c path="contains.A"/></t>
	<c path="contains.A"/>
	<x path="Bool"/>
</f></contains>
		<filter public="1" params="A" set="method" line="33" static="1"><f a="maybe:predicate">
	<t path="Option"><c path="filter.A"/></t>
	<f a="">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<t path="Option"><c path="filter.A"/></t>
</f></filter>
		<filterFmap public="1" params="A:B" set="method" line="39" static="1"><f a="maybe:predicate:fn">
	<t path="Option"><c path="filterFmap.A"/></t>
	<f a="">
		<c path="filterFmap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFmap.A"/>
		<t path="Option"><c path="filterFmap.B"/></t>
	</f>
	<t path="Option"><c path="filterFmap.B"/></t>
</f></filterFmap>
		<filterMap public="1" params="A:B" set="method" line="45" static="1"><f a="maybe:predicate:fn">
	<t path="Option"><c path="filterMap.A"/></t>
	<f a="">
		<c path="filterMap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<t path="Option"><c path="filterMap.B"/></t>
</f></filterMap>
		<flatMap public="1" params="A:B" set="method" line="51" static="1"><f a="maybe:fn">
	<t path="Option"><c path="flatMap.A"/></t>
	<f a="">
		<c path="flatMap.A"/>
		<t path="Option"><c path="flatMap.B"/></t>
	</f>
	<t path="Option"><c path="flatMap.B"/></t>
</f></flatMap>
		<flatten public="1" params="A" set="method" line="56" static="1"><f a="mmaybe">
	<t path="Option"><t path="Option"><c path="flatten.A"/></t></t>
	<t path="Option"><c path="flatten.A"/></t>
</f></flatten>
		<fold public="1" params="A:B" set="method" line="61" static="1"><f a="maybe:seed:fn">
	<t path="Option"><c path="fold.A"/></t>
	<c path="fold.B"/>
	<f a="accumulator:current">
		<c path="fold.B"/>
		<c path="fold.A"/>
		<c path="fold.B"/>
	</f>
	<c path="fold.B"/>
</f></fold>
		<iterator public="1" params="A" set="method" line="66" static="1"><f a="maybe">
	<t path="Option"><c path="iterator.A"/></t>
	<t path="Iterator"><c path="iterator.A"/></t>
</f></iterator>
		<map public="1" params="A:B" set="method" line="72" static="1"><f a="maybe:fn">
	<t path="Option"><c path="map.A"/></t>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<t path="Option"><c path="map.B"/></t>
</f></map>
		<match public="1" params="A:B" set="method" line="77" static="1"><f a="maybe:whenSome:whenNone">
	<t path="Option"><c path="match.A"/></t>
	<f a="">
		<c path="match.A"/>
		<c path="match.B"/>
	</f>
	<f a=""><c path="match.B"/></f>
	<c path="match.B"/>
</f></match>
		<mutate public="1" params="A" set="method" line="82" static="1"><f a="maybe:whenSome:whenNone">
	<t path="Option"><c path="mutate.A"/></t>
	<f a="">
		<c path="mutate.A"/>
		<x path="Void"/>
	</f>
	<f a=""><x path="Void"/></f>
	<t path="Option"><c path="mutate.A"/></t>
</f></mutate>
		<mutate_ public="1" params="A" set="method" line="90" static="1"><f a="maybe:whenSome">
	<t path="Option"><c path="mutate_.A"/></t>
	<f a="">
		<c path="mutate_.A"/>
		<x path="Void"/>
	</f>
	<t path="Option"><c path="mutate_.A"/></t>
</f></mutate_>
		<orDefault public="1" params="A" set="method" line="98" static="1"><f a="maybe:whenNone">
	<t path="Option"><c path="orDefault.A"/></t>
	<f a=""><c path="orDefault.A"/></f>
	<c path="orDefault.A"/>
</f></orDefault>
		<orElse public="1" params="A" set="method" line="101" static="1"><f a="maybe:genOther">
	<t path="Option"><c path="orElse.A"/></t>
	<f a=""><t path="Option"><c path="orElse.A"/></t></f>
	<t path="Option"><c path="orElse.A"/></t>
</f></orElse>
		<toArray public="1" params="A" set="method" line="106" static="1"><f a="maybe">
	<t path="Option"><c path="toArray.A"/></t>
	<t path="Iterable"><c path="toArray.A"/></t>
</f></toArray>
		<toEither public="1" params="A" set="method" line="111" static="1"><f a="maybe">
	<t path="Option"><c path="toEither.A"/></t>
	<t path="Either">
		<c path="String"/>
		<c path="toEither.A"/>
	</t>
</f></toEither>
		<toIterable public="1" params="A" set="method" line="116" static="1"><f a="maybe">
	<t path="Option"><c path="toIterable.A"/></t>
	<t path="Iterable"><c path="toIterable.A"/></t>
</f></toIterable>
		<toNullable public="1" params="A" set="method" line="120" static="1"><f a="maybe">
	<t path="Option"><c path="toNullable.A"/></t>
	<x path="Null"><c path="toNullable.A"/></x>
</f></toNullable>
		<toOutcome public="1" params="A" set="method" line="125" static="1"><f a="maybe">
	<t path="Option"><c path="toOutcome.A"/></t>
	<t path="Outcome"><c path="toOutcome.A"/></t>
</f></toOutcome>
		<traceMessage public="1" params="A" set="method" line="130" static="1"><f a="maybe:messageWhenNone">
	<t path="Option"><c path="traceMessage.A"/></t>
	<f a=""><c path="String"/></f>
	<t path="Option"><c path="traceMessage.A"/></t>
</f></traceMessage>
		<traceValue public="1" params="A" set="method" line="136" static="1"><f a="maybe">
	<t path="Option"><c path="traceValue.A"/></t>
	<t path="Option"><c path="traceValue.A"/></t>
</f></traceValue>
		<zip public="1" params="A:B" set="method" line="142" static="1"><f a="mA:mB">
	<t path="Option"><c path="zip.A"/></t>
	<t path="Option"><c path="zip.B"/></t>
	<t path="Option"><t path="Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</t></t>
</f></zip>
		<zipWith public="1" params="A:B:C" set="method" line="145" static="1"><f a="mA:mB:fn">
	<t path="Option"><c path="zipWith.A"/></t>
	<t path="Option"><c path="zipWith.B"/></t>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<t path="Option"><c path="zipWith.C"/></t>
</f></zipWith>
		<zipWith3 public="1" params="A:B:C:D" set="method" line="150" static="1"><f a="mA:mB:mC:fn">
	<t path="Option"><c path="zipWith3.A"/></t>
	<t path="Option"><c path="zipWith3.B"/></t>
	<t path="Option"><c path="zipWith3.C"/></t>
	<f a="::">
		<c path="zipWith3.A"/>
		<c path="zipWith3.B"/>
		<c path="zipWith3.C"/>
		<c path="zipWith3.D"/>
	</f>
	<t path="Option"><c path="zipWith3.D"/></t>
</f></zipWith3>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<enum path="interlude.ds.Outcome" params="A" file="src/interlude/ds/Outcome.hx">
		<Success a="a"><c path="interlude.ds.Outcome.A"/></Success>
		<Failure a="message:?pos">
			<c path="String"/>
			<x path="Null"><t path="haxe.PosInfos"/></x>
		</Failure>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":using"><e>interlude.ds.Outcome.OutcomeTools</e></m>
		</meta>
	</enum>
	<class path="interlude.ds.OutcomeTools" params="" file="src/interlude/ds/Outcome.hx" module="interlude.ds.Outcome">
		<all public="1" params="A" get="inline" set="null" line="12" static="1"><f a="o:predicate">
	<e path="interlude.ds.Outcome"><c path="all.A"/></e>
	<f a="">
		<c path="all.A"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></all>
		<any public="1" params="A" set="method" line="15" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="any.A"/></e>
	<x path="Bool"/>
</f></any>
		<anyMatch public="1" params="A" set="method" line="20" static="1"><f a="o:predicate">
	<e path="interlude.ds.Outcome"><c path="anyMatch.A"/></e>
	<f a="">
		<c path="anyMatch.A"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></anyMatch>
		<ap public="1" params="A:B" set="method" line="25" static="1"><f a="fn:o">
	<e path="interlude.ds.Outcome"><f a="">
	<c path="ap.A"/>
	<c path="ap.B"/>
</f></e>
	<e path="interlude.ds.Outcome"><c path="ap.A"/></e>
	<e path="interlude.ds.Outcome"><c path="ap.B"/></e>
</f></ap>
		<asFailure public="1" params="A" get="inline" set="null" line="28" static="1"><f a="message:?pos">
	<c path="String"/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<e path="interlude.ds.Outcome"><c path="asFailure.A"/></e>
</f></asFailure>
		<asOutcome public="1" params="A" get="inline" set="null" line="31" static="1"><f a="value">
	<c path="asOutcome.A"/>
	<e path="interlude.ds.Outcome"><c path="asOutcome.A"/></e>
</f></asOutcome>
		<asSuccess public="1" params="A" get="inline" set="null" line="34" static="1"><f a="value">
	<c path="asSuccess.A"/>
	<e path="interlude.ds.Outcome"><c path="asSuccess.A"/></e>
</f></asSuccess>
		<contains public="1" params="A" set="method" line="37" static="1"><f a="o:value">
	<e path="interlude.ds.Outcome"><c path="contains.A"/></e>
	<c path="contains.A"/>
	<x path="Bool"/>
</f></contains>
		<filter public="1" params="A" set="method" line="42" static="1"><f a="o:predicate">
	<e path="interlude.ds.Outcome"><c path="filter.A"/></e>
	<f a="">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<e path="interlude.ds.Outcome"><c path="filter.A"/></e>
</f></filter>
		<filterFmap public="1" params="A:B" set="method" line="47" static="1"><f a="o:predicate:fn">
	<e path="interlude.ds.Outcome"><c path="filterFmap.A"/></e>
	<f a="">
		<c path="filterFmap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFmap.A"/>
		<e path="interlude.ds.Outcome"><c path="filterFmap.B"/></e>
	</f>
	<e path="interlude.ds.Outcome"><c path="filterFmap.B"/></e>
</f></filterFmap>
		<filterMap public="1" params="A:B" set="method" line="52" static="1"><f a="o:predicate:fn">
	<e path="interlude.ds.Outcome"><c path="filterMap.A"/></e>
	<f a="">
		<c path="filterMap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<e path="interlude.ds.Outcome"><c path="filterMap.B"/></e>
</f></filterMap>
		<flatMap public="1" params="A:B" set="method" line="57" static="1"><f a="o:fn">
	<e path="interlude.ds.Outcome"><c path="flatMap.A"/></e>
	<f a="">
		<c path="flatMap.A"/>
		<e path="interlude.ds.Outcome"><c path="flatMap.B"/></e>
	</f>
	<e path="interlude.ds.Outcome"><c path="flatMap.B"/></e>
</f></flatMap>
		<flatten public="1" params="A" set="method" line="62" static="1"><f a="oo">
	<e path="interlude.ds.Outcome"><e path="interlude.ds.Outcome"><c path="flatten.A"/></e></e>
	<e path="interlude.ds.Outcome"><c path="flatten.A"/></e>
</f></flatten>
		<fold public="1" params="A:B" set="method" line="67" static="1"><f a="o:seed:fn">
	<e path="interlude.ds.Outcome"><c path="fold.A"/></e>
	<c path="fold.B"/>
	<f a="accumulator:current">
		<c path="fold.B"/>
		<c path="fold.A"/>
		<c path="fold.B"/>
	</f>
	<c path="fold.B"/>
</f></fold>
		<iterator public="1" params="A" set="method" line="72" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="iterator.A"/></e>
	<t path="Iterator"><c path="iterator.A"/></t>
</f></iterator>
		<map public="1" params="A:B" set="method" line="77" static="1"><f a="o:fn">
	<e path="interlude.ds.Outcome"><c path="map.A"/></e>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<e path="interlude.ds.Outcome"><c path="map.B"/></e>
</f></map>
		<match public="1" params="A:B" set="method" line="82" static="1"><f a="o:whenSuccess:whenFailure">
	<e path="interlude.ds.Outcome"><c path="match.A"/></e>
	<f a="">
		<c path="match.A"/>
		<c path="match.B"/>
	</f>
	<f a="message:?pos">
		<c path="String"/>
		<t path="haxe.PosInfos"/>
		<c path="match.B"/>
	</f>
	<c path="match.B"/>
</f></match>
		<mutate public="1" params="A" set="method" line="87" static="1"><f a="o:whenSuccess:whenFailure">
	<e path="interlude.ds.Outcome"><c path="mutate.A"/></e>
	<f a="">
		<c path="mutate.A"/>
		<x path="Void"/>
	</f>
	<f a="message:?pos">
		<c path="String"/>
		<t path="haxe.PosInfos"/>
		<x path="Void"/>
	</f>
	<e path="interlude.ds.Outcome"><c path="mutate.A"/></e>
</f></mutate>
		<mutate_ public="1" params="A" set="method" line="95" static="1"><f a="o:whenSuccess">
	<e path="interlude.ds.Outcome"><c path="mutate_.A"/></e>
	<f a="">
		<c path="mutate_.A"/>
		<x path="Void"/>
	</f>
	<e path="interlude.ds.Outcome"><c path="mutate_.A"/></e>
</f></mutate_>
		<orDefault public="1" params="A" set="method" line="103" static="1"><f a="o:whenFailure">
	<e path="interlude.ds.Outcome"><c path="orDefault.A"/></e>
	<f a="message:?pos">
		<c path="String"/>
		<t path="haxe.PosInfos"/>
		<c path="orDefault.A"/>
	</f>
	<c path="orDefault.A"/>
</f></orDefault>
		<orElse public="1" params="A" set="method" line="106" static="1"><f a="o:genOther">
	<e path="interlude.ds.Outcome"><c path="orElse.A"/></e>
	<f a=""><e path="interlude.ds.Outcome"><c path="orElse.A"/></e></f>
	<e path="interlude.ds.Outcome"><c path="orElse.A"/></e>
</f></orElse>
		<toArray public="1" params="A" set="method" line="111" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="toArray.A"/></e>
	<t path="Iterable"><c path="toArray.A"/></t>
</f></toArray>
		<toIterable public="1" params="A" set="method" line="116" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="toIterable.A"/></e>
	<t path="Iterable"><c path="toIterable.A"/></t>
</f></toIterable>
		<toEither public="1" params="A" set="method" line="120" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="toEither.A"/></e>
	<t path="Either">
		<c path="String"/>
		<c path="toEither.A"/>
	</t>
</f></toEither>
		<toNullable public="1" params="A" set="method" line="125" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="toNullable.A"/></e>
	<x path="Null"><c path="toNullable.A"/></x>
</f></toNullable>
		<toOption public="1" params="A" set="method" line="130" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="toOption.A"/></e>
	<t path="Option"><c path="toOption.A"/></t>
</f></toOption>
		<traceMessage public="1" params="A" set="method" line="135" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="traceMessage.A"/></e>
	<e path="interlude.ds.Outcome"><c path="traceMessage.A"/></e>
</f></traceMessage>
		<traceValue public="1" params="A" set="method" line="140" static="1"><f a="o">
	<e path="interlude.ds.Outcome"><c path="traceValue.A"/></e>
	<e path="interlude.ds.Outcome"><c path="traceValue.A"/></e>
</f></traceValue>
		<zip public="1" params="A:B" set="method" line="145" static="1"><f a="mA:mB">
	<e path="interlude.ds.Outcome"><c path="zip.A"/></e>
	<e path="interlude.ds.Outcome"><c path="zip.B"/></e>
	<e path="interlude.ds.Outcome"><t path="Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</t></e>
</f></zip>
		<zipWith public="1" params="A:B:C" set="method" line="148" static="1"><f a="mA:mB:fn">
	<e path="interlude.ds.Outcome"><c path="zipWith.A"/></e>
	<e path="interlude.ds.Outcome"><c path="zipWith.B"/></e>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<e path="interlude.ds.Outcome"><c path="zipWith.C"/></e>
</f></zipWith>
		<zipWith3 public="1" params="A:B:C:D" set="method" line="153" static="1"><f a="mA:mB:mC:fn">
	<e path="interlude.ds.Outcome"><c path="zipWith3.A"/></e>
	<e path="interlude.ds.Outcome"><c path="zipWith3.B"/></e>
	<e path="interlude.ds.Outcome"><c path="zipWith3.C"/></e>
	<f a="::">
		<c path="zipWith3.A"/>
		<c path="zipWith3.B"/>
		<c path="zipWith3.C"/>
		<c path="zipWith3.D"/>
	</f>
	<e path="interlude.ds.Outcome"><c path="zipWith3.D"/></e>
</f></zipWith3>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<typedef path="interlude.ds.KeyValuePair" params="K:V" file="src/interlude/ds/Pair.hx" module="interlude.ds.Pair"><a>
	<value><c path="interlude.ds.KeyValuePair.V"/></value>
	<key><c path="interlude.ds.KeyValuePair.K"/></key>
</a></typedef>
	<class path="interlude.ds.TPair" params="X:Y" file="src/interlude/ds/Pair.hx" module="interlude.ds.Pair">
		<_1 public="1"><c path="interlude.ds.TPair.X"/></_1>
		<_2 public="1"><c path="interlude.ds.TPair.Y"/></_2>
		<new public="1" set="method" line="8">
			<f a="_1:_2">
				<c path="interlude.ds.TPair.X"/>
				<c path="interlude.ds.TPair.Y"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":inheritDoc"/>
			</meta>
			<haxe_doc></haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":publicFields"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="interlude.ds.TTrio" params="X:Y:Z" file="src/interlude/ds/Pair.hx" module="interlude.ds.Pair">
		<_1 public="1"><c path="interlude.ds.TTrio.X"/></_1>
		<_2 public="1"><c path="interlude.ds.TTrio.Y"/></_2>
		<_3 public="1"><c path="interlude.ds.TTrio.Z"/></_3>
		<new public="1" set="method" line="12">
			<f a="_1:_2:_3">
				<c path="interlude.ds.TTrio.X"/>
				<c path="interlude.ds.TTrio.Y"/>
				<c path="interlude.ds.TTrio.Z"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":inheritDoc"/>
			</meta>
			<haxe_doc></haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":publicFields"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="interlude.ds.Pair" params="X:Y" file="src/interlude/ds/Pair.hx">
		<from><icast><c path="interlude.ds.TPair">
	<c path="interlude.ds.Pair.X"/>
	<c path="interlude.ds.Pair.Y"/>
</c></icast></from>
		<this><c path="interlude.ds.TPair">
	<c path="interlude.ds.Pair.X"/>
	<c path="interlude.ds.Pair.Y"/>
</c></this>
		<to><icast><c path="interlude.ds.TPair">
	<c path="interlude.ds.Pair.X"/>
	<c path="interlude.ds.Pair.Y"/>
</c></icast></to>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="interlude.ds._Pair.Pair_Impl_" params="" file="src/interlude/ds/Pair.hx" private="1" module="interlude.ds.Pair" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="pair">
			<c path="interlude.ds.TPair">
				<c path="interlude.ds.Pair.X"/>
				<c path="interlude.ds.Pair.Y"/>
			</c>
			<x path="interlude.ds.Pair">
				<c path="interlude.ds.Pair.X"/>
				<c path="interlude.ds.Pair.Y"/>
			</x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<apply public="1" params="A:B:Z" get="inline" set="null" line="19" static="1"><f a="t:fn">
	<x path="interlude.ds.Pair">
		<c path="apply.A"/>
		<c path="apply.B"/>
	</x>
	<f a=":">
		<c path="apply.A"/>
		<c path="apply.B"/>
		<c path="apply.Z"/>
	</f>
	<c path="apply.Z"/>
</f></apply>
	<toKeyValue public="1" params="A:B" get="inline" set="null" line="22" static="1"><f a="t">
	<x path="interlude.ds.Pair">
		<c path="toKeyValue.A"/>
		<c path="toKeyValue.B"/>
	</x>
	<t path="interlude.ds.KeyValuePair">
		<c path="toKeyValue.A"/>
		<c path="toKeyValue.B"/>
	</t>
</f></toKeyValue>
	<eval public="1" params="A:Z" get="inline" set="null" line="25" static="1"><f a="t">
	<x path="interlude.ds.Pair">
		<f a="">
			<c path="eval.A"/>
			<c path="eval.Z"/>
		</f>
		<c path="eval.A"/>
	</x>
	<c path="eval.Z"/>
</f></eval>
	<fromN public="1" params="A:B:Z" get="inline" set="null" line="28" static="1"><f a="fn:t">
	<f a=":">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
		<c path="fromN.Z"/>
	</f>
	<x path="interlude.ds.Pair">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
	</x>
	<c path="fromN.Z"/>
</f></fromN>
	<fromNC public="1" params="A:B:Z" get="inline" set="null" line="31" static="1"><f a="fn:t">
	<f a="">
		<c path="fromNC.A"/>
		<f a="">
			<c path="fromNC.B"/>
			<c path="fromNC.Z"/>
		</f>
	</f>
	<x path="interlude.ds.Pair">
		<c path="fromNC.A"/>
		<c path="fromNC.B"/>
	</x>
	<c path="fromNC.Z"/>
</f></fromNC>
	<map_1 public="1" params="A:B:Z" set="method" line="34" static="1"><f a="t:fn">
	<x path="interlude.ds.Pair">
		<c path="map_1.A"/>
		<c path="map_1.B"/>
	</x>
	<f a="">
		<c path="map_1.A"/>
		<c path="map_1.Z"/>
	</f>
	<x path="interlude.ds.Pair">
		<c path="map_1.Z"/>
		<c path="map_1.B"/>
	</x>
</f></map_1>
	<map_2 public="1" params="A:B:Z" set="method" line="39" static="1"><f a="t:fn">
	<x path="interlude.ds.Pair">
		<c path="map_2.A"/>
		<c path="map_2.B"/>
	</x>
	<f a="">
		<c path="map_2.B"/>
		<c path="map_2.Z"/>
	</f>
	<x path="interlude.ds.Pair">
		<c path="map_2.A"/>
		<c path="map_2.Z"/>
	</x>
</f></map_2>
	<fst public="1" params="A" get="inline" set="null" line="44" static="1"><f a="tup">
	<a><_1><c path="fst.A"/></_1></a>
	<c path="fst.A"/>
</f></fst>
	<snd public="1" params="A" get="inline" set="null" line="47" static="1"><f a="tup">
	<a><_2><c path="snd.A"/></_2></a>
	<c path="snd.A"/>
</f></snd>
	<with public="1" params="A:B" get="inline" set="null" line="50" static="1"><f a="a:b">
	<c path="with.A"/>
	<c path="with.B"/>
	<x path="interlude.ds.Pair">
		<c path="with.A"/>
		<c path="with.B"/>
	</x>
</f></with>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="interlude.ds._Pair.Pair_Impl_" params="" file="src/interlude/ds/Pair.hx" private="1" module="interlude.ds.Pair" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="pair">
				<c path="interlude.ds.TPair">
					<c path="interlude.ds.Pair.X"/>
					<c path="interlude.ds.Pair.Y"/>
				</c>
				<x path="interlude.ds.Pair">
					<c path="interlude.ds.Pair.X"/>
					<c path="interlude.ds.Pair.Y"/>
				</x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<apply public="1" params="A:B:Z" get="inline" set="null" line="19" static="1"><f a="t:fn">
	<x path="interlude.ds.Pair">
		<c path="apply.A"/>
		<c path="apply.B"/>
	</x>
	<f a=":">
		<c path="apply.A"/>
		<c path="apply.B"/>
		<c path="apply.Z"/>
	</f>
	<c path="apply.Z"/>
</f></apply>
		<toKeyValue public="1" params="A:B" get="inline" set="null" line="22" static="1"><f a="t">
	<x path="interlude.ds.Pair">
		<c path="toKeyValue.A"/>
		<c path="toKeyValue.B"/>
	</x>
	<t path="interlude.ds.KeyValuePair">
		<c path="toKeyValue.A"/>
		<c path="toKeyValue.B"/>
	</t>
</f></toKeyValue>
		<eval public="1" params="A:Z" get="inline" set="null" line="25" static="1"><f a="t">
	<x path="interlude.ds.Pair">
		<f a="">
			<c path="eval.A"/>
			<c path="eval.Z"/>
		</f>
		<c path="eval.A"/>
	</x>
	<c path="eval.Z"/>
</f></eval>
		<fromN public="1" params="A:B:Z" get="inline" set="null" line="28" static="1"><f a="fn:t">
	<f a=":">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
		<c path="fromN.Z"/>
	</f>
	<x path="interlude.ds.Pair">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
	</x>
	<c path="fromN.Z"/>
</f></fromN>
		<fromNC public="1" params="A:B:Z" get="inline" set="null" line="31" static="1"><f a="fn:t">
	<f a="">
		<c path="fromNC.A"/>
		<f a="">
			<c path="fromNC.B"/>
			<c path="fromNC.Z"/>
		</f>
	</f>
	<x path="interlude.ds.Pair">
		<c path="fromNC.A"/>
		<c path="fromNC.B"/>
	</x>
	<c path="fromNC.Z"/>
</f></fromNC>
		<map_1 public="1" params="A:B:Z" set="method" line="34" static="1"><f a="t:fn">
	<x path="interlude.ds.Pair">
		<c path="map_1.A"/>
		<c path="map_1.B"/>
	</x>
	<f a="">
		<c path="map_1.A"/>
		<c path="map_1.Z"/>
	</f>
	<x path="interlude.ds.Pair">
		<c path="map_1.Z"/>
		<c path="map_1.B"/>
	</x>
</f></map_1>
		<map_2 public="1" params="A:B:Z" set="method" line="39" static="1"><f a="t:fn">
	<x path="interlude.ds.Pair">
		<c path="map_2.A"/>
		<c path="map_2.B"/>
	</x>
	<f a="">
		<c path="map_2.B"/>
		<c path="map_2.Z"/>
	</f>
	<x path="interlude.ds.Pair">
		<c path="map_2.A"/>
		<c path="map_2.Z"/>
	</x>
</f></map_2>
		<fst public="1" params="A" get="inline" set="null" line="44" static="1"><f a="tup">
	<a><_1><c path="fst.A"/></_1></a>
	<c path="fst.A"/>
</f></fst>
		<snd public="1" params="A" get="inline" set="null" line="47" static="1"><f a="tup">
	<a><_2><c path="snd.A"/></_2></a>
	<c path="snd.A"/>
</f></snd>
		<with public="1" params="A:B" get="inline" set="null" line="50" static="1"><f a="a:b">
	<c path="with.A"/>
	<c path="with.B"/>
	<x path="interlude.ds.Pair">
		<c path="with.A"/>
		<c path="with.B"/>
	</x>
</f></with>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="interlude.ds.Trio" params="X:Y:Z" file="src/interlude/ds/Pair.hx" module="interlude.ds.Pair">
		<from><icast><c path="interlude.ds.TTrio">
	<c path="interlude.ds.Trio.X"/>
	<c path="interlude.ds.Trio.Y"/>
	<c path="interlude.ds.Trio.Z"/>
</c></icast></from>
		<this><c path="interlude.ds.TTrio">
	<c path="interlude.ds.Trio.X"/>
	<c path="interlude.ds.Trio.Y"/>
	<c path="interlude.ds.Trio.Z"/>
</c></this>
		<to><icast><c path="interlude.ds.TTrio">
	<c path="interlude.ds.Trio.X"/>
	<c path="interlude.ds.Trio.Y"/>
	<c path="interlude.ds.Trio.Z"/>
</c></icast></to>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="interlude.ds._Pair.Trio_Impl_" params="" file="src/interlude/ds/Pair.hx" private="1" module="interlude.ds.Pair" final="1">
	<_new public="1" get="inline" set="null" line="58" static="1">
		<f a="trio">
			<c path="interlude.ds.TTrio">
				<c path="interlude.ds.Trio.X"/>
				<c path="interlude.ds.Trio.Y"/>
				<c path="interlude.ds.Trio.Z"/>
			</c>
			<x path="interlude.ds.Trio">
				<c path="interlude.ds.Trio.X"/>
				<c path="interlude.ds.Trio.Y"/>
				<c path="interlude.ds.Trio.Z"/>
			</x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<apply public="1" params="A:B:C:Z" get="inline" set="null" line="60" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="apply.A"/>
		<c path="apply.B"/>
		<c path="apply.C"/>
	</x>
	<f a="::">
		<c path="apply.A"/>
		<c path="apply.B"/>
		<c path="apply.C"/>
		<c path="apply.Z"/>
	</f>
	<c path="apply.Z"/>
</f></apply>
	<eval public="1" params="A:B:Z" get="inline" set="null" line="63" static="1"><f a="t">
	<x path="interlude.ds.Trio">
		<f a=":">
			<c path="eval.A"/>
			<c path="eval.B"/>
			<c path="eval.Z"/>
		</f>
		<c path="eval.A"/>
		<c path="eval.B"/>
	</x>
	<c path="eval.Z"/>
</f></eval>
	<fromN public="1" params="A:B:C:Z" get="inline" set="null" line="66" static="1"><f a="fn:t">
	<f a="::">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
		<c path="fromN.C"/>
		<c path="fromN.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
		<c path="fromN.C"/>
	</x>
	<c path="fromN.Z"/>
</f></fromN>
	<fromNC public="1" params="A:B:C:Z" get="inline" set="null" line="69" static="1"><f a="fn:t">
	<f a="">
		<c path="fromNC.A"/>
		<f a="">
			<c path="fromNC.B"/>
			<f a="">
				<c path="fromNC.C"/>
				<c path="fromNC.Z"/>
			</f>
		</f>
	</f>
	<x path="interlude.ds.Trio">
		<c path="fromNC.A"/>
		<c path="fromNC.B"/>
		<c path="fromNC.C"/>
	</x>
	<c path="fromNC.Z"/>
</f></fromNC>
	<map_1 public="1" params="A:B:C:Z" set="method" line="72" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="map_1.A"/>
		<c path="map_1.B"/>
		<c path="map_1.C"/>
	</x>
	<f a="">
		<c path="map_1.A"/>
		<c path="map_1.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="map_1.Z"/>
		<c path="map_1.B"/>
		<c path="map_1.C"/>
	</x>
</f></map_1>
	<map_2 public="1" params="A:B:C:Z" set="method" line="78" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="map_2.A"/>
		<c path="map_2.B"/>
		<c path="map_2.C"/>
	</x>
	<f a="">
		<c path="map_2.B"/>
		<c path="map_2.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="map_2.A"/>
		<c path="map_2.Z"/>
		<c path="map_2.C"/>
	</x>
</f></map_2>
	<map_3 public="1" params="A:B:C:Z" set="method" line="84" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="map_3.A"/>
		<c path="map_3.B"/>
		<c path="map_3.C"/>
	</x>
	<f a="">
		<c path="map_3.C"/>
		<c path="map_3.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="map_3.A"/>
		<c path="map_3.B"/>
		<c path="map_3.Z"/>
	</x>
</f></map_3>
	<thd public="1" params="A" get="inline" set="null" line="90" static="1"><f a="tup">
	<a><_3><c path="thd.A"/></_3></a>
	<c path="thd.A"/>
</f></thd>
	<with3 public="1" params="A:B:C" get="inline" set="null" line="96" static="1"><f a="a:b:c">
	<c path="with3.A"/>
	<c path="with3.B"/>
	<c path="with3.C"/>
	<x path="interlude.ds.Trio">
		<c path="with3.A"/>
		<c path="with3.B"/>
		<c path="with3.C"/>
	</x>
</f></with3>
</class></impl>
	</abstract>
	<class path="interlude.ds._Pair.Trio_Impl_" params="" file="src/interlude/ds/Pair.hx" private="1" module="interlude.ds.Pair" final="1">
		<_new public="1" get="inline" set="null" line="58" static="1">
			<f a="trio">
				<c path="interlude.ds.TTrio">
					<c path="interlude.ds.Trio.X"/>
					<c path="interlude.ds.Trio.Y"/>
					<c path="interlude.ds.Trio.Z"/>
				</c>
				<x path="interlude.ds.Trio">
					<c path="interlude.ds.Trio.X"/>
					<c path="interlude.ds.Trio.Y"/>
					<c path="interlude.ds.Trio.Z"/>
				</x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<apply public="1" params="A:B:C:Z" get="inline" set="null" line="60" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="apply.A"/>
		<c path="apply.B"/>
		<c path="apply.C"/>
	</x>
	<f a="::">
		<c path="apply.A"/>
		<c path="apply.B"/>
		<c path="apply.C"/>
		<c path="apply.Z"/>
	</f>
	<c path="apply.Z"/>
</f></apply>
		<eval public="1" params="A:B:Z" get="inline" set="null" line="63" static="1"><f a="t">
	<x path="interlude.ds.Trio">
		<f a=":">
			<c path="eval.A"/>
			<c path="eval.B"/>
			<c path="eval.Z"/>
		</f>
		<c path="eval.A"/>
		<c path="eval.B"/>
	</x>
	<c path="eval.Z"/>
</f></eval>
		<fromN public="1" params="A:B:C:Z" get="inline" set="null" line="66" static="1"><f a="fn:t">
	<f a="::">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
		<c path="fromN.C"/>
		<c path="fromN.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="fromN.A"/>
		<c path="fromN.B"/>
		<c path="fromN.C"/>
	</x>
	<c path="fromN.Z"/>
</f></fromN>
		<fromNC public="1" params="A:B:C:Z" get="inline" set="null" line="69" static="1"><f a="fn:t">
	<f a="">
		<c path="fromNC.A"/>
		<f a="">
			<c path="fromNC.B"/>
			<f a="">
				<c path="fromNC.C"/>
				<c path="fromNC.Z"/>
			</f>
		</f>
	</f>
	<x path="interlude.ds.Trio">
		<c path="fromNC.A"/>
		<c path="fromNC.B"/>
		<c path="fromNC.C"/>
	</x>
	<c path="fromNC.Z"/>
</f></fromNC>
		<map_1 public="1" params="A:B:C:Z" set="method" line="72" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="map_1.A"/>
		<c path="map_1.B"/>
		<c path="map_1.C"/>
	</x>
	<f a="">
		<c path="map_1.A"/>
		<c path="map_1.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="map_1.Z"/>
		<c path="map_1.B"/>
		<c path="map_1.C"/>
	</x>
</f></map_1>
		<map_2 public="1" params="A:B:C:Z" set="method" line="78" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="map_2.A"/>
		<c path="map_2.B"/>
		<c path="map_2.C"/>
	</x>
	<f a="">
		<c path="map_2.B"/>
		<c path="map_2.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="map_2.A"/>
		<c path="map_2.Z"/>
		<c path="map_2.C"/>
	</x>
</f></map_2>
		<map_3 public="1" params="A:B:C:Z" set="method" line="84" static="1"><f a="t:fn">
	<x path="interlude.ds.Trio">
		<c path="map_3.A"/>
		<c path="map_3.B"/>
		<c path="map_3.C"/>
	</x>
	<f a="">
		<c path="map_3.C"/>
		<c path="map_3.Z"/>
	</f>
	<x path="interlude.ds.Trio">
		<c path="map_3.A"/>
		<c path="map_3.B"/>
		<c path="map_3.Z"/>
	</x>
</f></map_3>
		<thd public="1" params="A" get="inline" set="null" line="90" static="1"><f a="tup">
	<a><_3><c path="thd.A"/></_3></a>
	<c path="thd.A"/>
</f></thd>
		<with3 public="1" params="A:B:C" get="inline" set="null" line="96" static="1"><f a="a:b:c">
	<c path="with3.A"/>
	<c path="with3.B"/>
	<c path="with3.C"/>
	<x path="interlude.ds.Trio">
		<c path="with3.A"/>
		<c path="with3.B"/>
		<c path="with3.C"/>
	</x>
</f></with3>
	</class>
	<abstract path="interlude.ds.State" params="X:A" file="src/interlude/ds/State.hx">
		<from><icast><f a="">
	<c path="interlude.ds.State.X"/>
	<t path="Pair">
		<c path="interlude.ds.State.A"/>
		<c path="interlude.ds.State.X"/>
	</t>
</f></icast></from>
		<this><f a="">
	<c path="interlude.ds.State.X"/>
	<t path="Pair">
		<c path="interlude.ds.State.A"/>
		<c path="interlude.ds.State.X"/>
	</t>
</f></this>
		<to><icast><f a="">
	<c path="interlude.ds.State.X"/>
	<t path="Pair">
		<c path="interlude.ds.State.A"/>
		<c path="interlude.ds.State.X"/>
	</t>
</f></icast></to>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":forward"/>
			<m n=":callable"/>
		</meta>
		<impl><class path="interlude.ds._State.State_Impl_" params="" file="src/interlude/ds/State.hx" private="1" module="interlude.ds.State" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="s">
			<f a="">
				<c path="interlude.ds.State.X"/>
				<t path="Pair">
					<c path="interlude.ds.State.A"/>
					<c path="interlude.ds.State.X"/>
				</t>
			</f>
			<x path="interlude.ds.State">
				<c path="interlude.ds.State.X"/>
				<c path="interlude.ds.State.A"/>
			</x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<ap public="1" params="X:A:B" set="method" line="11" static="1"><f a="fn:s">
	<x path="interlude.ds.State">
		<c path="ap.X"/>
		<f a="">
			<c path="ap.A"/>
			<c path="ap.B"/>
		</f>
	</x>
	<x path="interlude.ds.State">
		<c path="ap.X"/>
		<c path="ap.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="ap.X"/>
		<c path="ap.B"/>
	</x>
</f></ap>
	<asState public="1" params="X:A" get="inline" set="null" line="14" static="1"><f a="a">
	<c path="asState.A"/>
	<x path="interlude.ds.State">
		<c path="asState.X"/>
		<c path="asState.A"/>
	</x>
</f></asState>
	<eval public="1" params="X:A" set="method" line="17" static="1"><f a="s:x">
	<x path="interlude.ds.State">
		<c path="eval.X"/>
		<c path="eval.A"/>
	</x>
	<c path="eval.X"/>
	<c path="eval.A"/>
</f></eval>
	<filter public="1" params="X:A" set="method" line="20" static="1"><f a="s:predicate">
	<x path="interlude.ds.State">
		<c path="filter.X"/>
		<c path="filter.A"/>
	</x>
	<f a="">
		<c path="filter.X"/>
		<x path="Bool"/>
	</f>
	<x path="interlude.ds.State">
		<c path="filter.X"/>
		<t path="Option"><c path="filter.A"/></t>
	</x>
</f></filter>
	<filterMap public="1" params="X:A:B" set="method" line="25" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.State">
		<c path="filterMap.X"/>
		<c path="filterMap.A"/>
	</x>
	<f a="">
		<c path="filterMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<x path="interlude.ds.State">
		<c path="filterMap.X"/>
		<t path="Option"><c path="filterMap.B"/></t>
	</x>
</f></filterMap>
	<filterFMap public="1" params="X:A:B" set="method" line="30" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.State">
		<c path="filterFMap.X"/>
		<c path="filterFMap.A"/>
	</x>
	<f a="">
		<c path="filterFMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFMap.A"/>
		<x path="interlude.ds.State">
			<c path="filterFMap.X"/>
			<c path="filterFMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.State">
		<c path="filterFMap.X"/>
		<t path="Option"><c path="filterFMap.B"/></t>
	</x>
</f></filterFMap>
	<flatMap public="1" params="X:A:B" set="method" line="35" static="1"><f a="s:fn">
	<x path="interlude.ds.State">
		<c path="flatMap.X"/>
		<c path="flatMap.A"/>
	</x>
	<f a="">
		<c path="flatMap.A"/>
		<x path="interlude.ds.State">
			<c path="flatMap.X"/>
			<c path="flatMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.State">
		<c path="flatMap.X"/>
		<c path="flatMap.B"/>
	</x>
</f></flatMap>
	<flatten public="1" params="X:A" set="method" line="38" static="1"><f a="s">
	<x path="interlude.ds.State">
		<c path="flatten.X"/>
		<x path="interlude.ds.State">
			<c path="flatten.X"/>
			<c path="flatten.A"/>
		</x>
	</x>
	<x path="interlude.ds.State">
		<c path="flatten.X"/>
		<c path="flatten.A"/>
	</x>
</f></flatten>
	<local public="1" params="X:A" set="method" line="41" static="1"><f a="s:fn">
	<x path="interlude.ds.State">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
	<f a="">
		<c path="local.X"/>
		<c path="local.X"/>
	</f>
	<x path="interlude.ds.State">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
</f></local>
	<map public="1" params="X:A:B" set="method" line="44" static="1"><f a="s:fn">
	<x path="interlude.ds.State">
		<c path="map.X"/>
		<c path="map.A"/>
	</x>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<x path="interlude.ds.State">
		<c path="map.X"/>
		<c path="map.B"/>
	</x>
</f></map>
	<run public="1" params="X:A" set="method" line="47" static="1"><f a="s:x">
	<x path="interlude.ds.State">
		<c path="run.X"/>
		<c path="run.A"/>
	</x>
	<c path="run.X"/>
	<c path="run.X"/>
</f></run>
	<zip public="1" params="X:A:B" set="method" line="50" static="1"><f a="sa:sb">
	<x path="interlude.ds.State">
		<c path="zip.X"/>
		<c path="zip.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zip.X"/>
		<c path="zip.B"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zip.X"/>
		<t path="Pair">
			<c path="zip.A"/>
			<c path="zip.B"/>
		</t>
	</x>
</f></zip>
	<zipWith public="1" params="X:A:B:Z" set="method" line="53" static="1"><f a="sa:sb:fn">
	<x path="interlude.ds.State">
		<c path="zipWith.X"/>
		<c path="zipWith.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zipWith.X"/>
		<c path="zipWith.B"/>
	</x>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.Z"/>
	</f>
	<x path="interlude.ds.State">
		<c path="zipWith.X"/>
		<c path="zipWith.Z"/>
	</x>
</f></zipWith>
	<zipWith3 public="1" params="X:A:B:C:Z" set="method" line="59" static="1"><f a="sa:sb:sc:fn">
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.B"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.C"/>
	</x>
	<f a="::">
		<c path="zipWith3.A"/>
		<c path="zipWith3.B"/>
		<c path="zipWith3.C"/>
		<c path="zipWith3.Z"/>
	</f>
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.Z"/>
	</x>
</f></zipWith3>
</class></impl>
	</abstract>
	<class path="interlude.ds._State.State_Impl_" params="" file="src/interlude/ds/State.hx" private="1" module="interlude.ds.State" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="s">
				<f a="">
					<c path="interlude.ds.State.X"/>
					<t path="Pair">
						<c path="interlude.ds.State.A"/>
						<c path="interlude.ds.State.X"/>
					</t>
				</f>
				<x path="interlude.ds.State">
					<c path="interlude.ds.State.X"/>
					<c path="interlude.ds.State.A"/>
				</x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<ap public="1" params="X:A:B" set="method" line="11" static="1"><f a="fn:s">
	<x path="interlude.ds.State">
		<c path="ap.X"/>
		<f a="">
			<c path="ap.A"/>
			<c path="ap.B"/>
		</f>
	</x>
	<x path="interlude.ds.State">
		<c path="ap.X"/>
		<c path="ap.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="ap.X"/>
		<c path="ap.B"/>
	</x>
</f></ap>
		<asState public="1" params="X:A" get="inline" set="null" line="14" static="1"><f a="a">
	<c path="asState.A"/>
	<x path="interlude.ds.State">
		<c path="asState.X"/>
		<c path="asState.A"/>
	</x>
</f></asState>
		<eval public="1" params="X:A" set="method" line="17" static="1"><f a="s:x">
	<x path="interlude.ds.State">
		<c path="eval.X"/>
		<c path="eval.A"/>
	</x>
	<c path="eval.X"/>
	<c path="eval.A"/>
</f></eval>
		<filter public="1" params="X:A" set="method" line="20" static="1"><f a="s:predicate">
	<x path="interlude.ds.State">
		<c path="filter.X"/>
		<c path="filter.A"/>
	</x>
	<f a="">
		<c path="filter.X"/>
		<x path="Bool"/>
	</f>
	<x path="interlude.ds.State">
		<c path="filter.X"/>
		<t path="Option"><c path="filter.A"/></t>
	</x>
</f></filter>
		<filterMap public="1" params="X:A:B" set="method" line="25" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.State">
		<c path="filterMap.X"/>
		<c path="filterMap.A"/>
	</x>
	<f a="">
		<c path="filterMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<x path="interlude.ds.State">
		<c path="filterMap.X"/>
		<t path="Option"><c path="filterMap.B"/></t>
	</x>
</f></filterMap>
		<filterFMap public="1" params="X:A:B" set="method" line="30" static="1"><f a="s:predicate:fn">
	<x path="interlude.ds.State">
		<c path="filterFMap.X"/>
		<c path="filterFMap.A"/>
	</x>
	<f a="">
		<c path="filterFMap.X"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFMap.A"/>
		<x path="interlude.ds.State">
			<c path="filterFMap.X"/>
			<c path="filterFMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.State">
		<c path="filterFMap.X"/>
		<t path="Option"><c path="filterFMap.B"/></t>
	</x>
</f></filterFMap>
		<flatMap public="1" params="X:A:B" set="method" line="35" static="1"><f a="s:fn">
	<x path="interlude.ds.State">
		<c path="flatMap.X"/>
		<c path="flatMap.A"/>
	</x>
	<f a="">
		<c path="flatMap.A"/>
		<x path="interlude.ds.State">
			<c path="flatMap.X"/>
			<c path="flatMap.B"/>
		</x>
	</f>
	<x path="interlude.ds.State">
		<c path="flatMap.X"/>
		<c path="flatMap.B"/>
	</x>
</f></flatMap>
		<flatten public="1" params="X:A" set="method" line="38" static="1"><f a="s">
	<x path="interlude.ds.State">
		<c path="flatten.X"/>
		<x path="interlude.ds.State">
			<c path="flatten.X"/>
			<c path="flatten.A"/>
		</x>
	</x>
	<x path="interlude.ds.State">
		<c path="flatten.X"/>
		<c path="flatten.A"/>
	</x>
</f></flatten>
		<local public="1" params="X:A" set="method" line="41" static="1"><f a="s:fn">
	<x path="interlude.ds.State">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
	<f a="">
		<c path="local.X"/>
		<c path="local.X"/>
	</f>
	<x path="interlude.ds.State">
		<c path="local.X"/>
		<c path="local.A"/>
	</x>
</f></local>
		<map public="1" params="X:A:B" set="method" line="44" static="1"><f a="s:fn">
	<x path="interlude.ds.State">
		<c path="map.X"/>
		<c path="map.A"/>
	</x>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<x path="interlude.ds.State">
		<c path="map.X"/>
		<c path="map.B"/>
	</x>
</f></map>
		<run public="1" params="X:A" set="method" line="47" static="1"><f a="s:x">
	<x path="interlude.ds.State">
		<c path="run.X"/>
		<c path="run.A"/>
	</x>
	<c path="run.X"/>
	<c path="run.X"/>
</f></run>
		<zip public="1" params="X:A:B" set="method" line="50" static="1"><f a="sa:sb">
	<x path="interlude.ds.State">
		<c path="zip.X"/>
		<c path="zip.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zip.X"/>
		<c path="zip.B"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zip.X"/>
		<t path="Pair">
			<c path="zip.A"/>
			<c path="zip.B"/>
		</t>
	</x>
</f></zip>
		<zipWith public="1" params="X:A:B:Z" set="method" line="53" static="1"><f a="sa:sb:fn">
	<x path="interlude.ds.State">
		<c path="zipWith.X"/>
		<c path="zipWith.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zipWith.X"/>
		<c path="zipWith.B"/>
	</x>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.Z"/>
	</f>
	<x path="interlude.ds.State">
		<c path="zipWith.X"/>
		<c path="zipWith.Z"/>
	</x>
</f></zipWith>
		<zipWith3 public="1" params="X:A:B:C:Z" set="method" line="59" static="1"><f a="sa:sb:sc:fn">
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.A"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.B"/>
	</x>
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.C"/>
	</x>
	<f a="::">
		<c path="zipWith3.A"/>
		<c path="zipWith3.B"/>
		<c path="zipWith3.C"/>
		<c path="zipWith3.Z"/>
	</f>
	<x path="interlude.ds.State">
		<c path="zipWith3.X"/>
		<c path="zipWith3.Z"/>
	</x>
</f></zipWith3>
	</class>
	<enum path="interlude.ds.Unit" params="" file="src/interlude/ds/Unit.hx">
		<Unit/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<abstract path="interlude.ds.Weighted" params="A" file="src/interlude/ds/Weighted.hx">
		<from>
			<icast><t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t></icast>
			<icast field="fromIterable"><t path="Iterable"><t path="Pair">
	<c path="fromIterable.A"/>
	<x path="Float"/>
</t></t></icast>
		</from>
		<this><t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t></this>
		<to><icast><t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t></icast></to>
		<haxe_doc><![CDATA[Represents a weighted probability distribution. Supports a tree-structure for
  weights with `Weighted<Weighted<A>>`  
  ```haxe
    enum Coin { H; T; }

    // Heads and Tails equally likely
    var fairCoin = [H, T].uniform();
    var fairFlips = [
        for(i in 0...10)
            fairCoin.draw(Math.random)
    ]; // ex: [T,H,H,T,T,H,T,T,H,T]

    // Tails much more likely than Heads
    var unfairCoin = [H.with(0.25), T.with(0.75)];
    var unfairFlips = [
        for(i in 0...10)
            unfairCoin.draw(Math.random)
    ]; // ex: [T,T,T,T,H,T,H,T,T,H]
  ```]]></haxe_doc>
		<meta>
			<m n=":forward"><e>iterator</e></m>
			<m n=":arrayAccess"/>
			<m n=":publicFields"/>
		</meta>
		<impl><class path="interlude.ds._Weighted.Weighted_Impl_" params="" file="src/interlude/ds/Weighted.hx" private="1" module="interlude.ds.Weighted" final="1">
	<_new public="1" get="inline" set="null" line="29" static="1">
		<f a="weights">
			<t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t>
			<x path="interlude.ds.Weighted"><c path="interlude.ds.Weighted.A"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":allow"><e>interlude.ds</e></m>
		</meta>
	</_new>
	<fromIterable params="A" set="method" line="33" static="1">
		<f a="value">
			<t path="Iterable"><t path="Pair">
	<c path="fromIterable.A"/>
	<x path="Float"/>
</t></t>
			<x path="interlude.ds.Weighted"><c path="fromIterable.A"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterable>
	<asArray public="1" set="method" line="37" static="1"><f a="this">
	<t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t>
	<c path="Array"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></c>
</f></asArray>
	<toString public="1" set="method" line="40" static="1"><f a="this">
	<t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t>
	<c path="String"/>
</f></toString>
</class></impl>
	</abstract>
	<class path="interlude.ds._Weighted.Weighted_Impl_" params="" file="src/interlude/ds/Weighted.hx" private="1" module="interlude.ds.Weighted" final="1">
		<_new public="1" get="inline" set="null" line="29" static="1">
			<f a="weights">
				<t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t>
				<x path="interlude.ds.Weighted"><c path="interlude.ds.Weighted.A"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":allow"><e>interlude.ds</e></m>
			</meta>
		</_new>
		<fromIterable params="A" set="method" line="33" static="1">
			<f a="value">
				<t path="Iterable"><t path="Pair">
	<c path="fromIterable.A"/>
	<x path="Float"/>
</t></t>
				<x path="interlude.ds.Weighted"><c path="fromIterable.A"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterable>
		<asArray public="1" set="method" line="37" static="1"><f a="this">
	<t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t>
	<c path="Array"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></c>
</f></asArray>
		<toString public="1" set="method" line="40" static="1"><f a="this">
	<t path="Iterable"><t path="Pair">
	<c path="interlude.ds.Weighted.A"/>
	<x path="Float"/>
</t></t>
	<c path="String"/>
</f></toString>
	</class>
	<class path="interlude.ds.WeightedTools" params="" file="src/interlude/ds/Weighted.hx" module="interlude.ds.Weighted">
		<asWeighted public="1" params="A" set="method" line="49" static="1">
			<f a="t">
				<c path="asWeighted.A"/>
				<x path="interlude.ds.Weighted"><c path="asWeighted.A"/></x>
			</f>
			<haxe_doc>Lifts a single value into a weighted distribution</haxe_doc>
		</asWeighted>
		<draw public="1" params="A" set="method" line="57" static="1">
			<f a="dist:randomGen">
				<x path="interlude.ds.Weighted"><c path="draw.A"/></x>
				<f a=""><x path="Float"/></f>
				<c path="draw.A"/>
			</f>
			<haxe_doc>Draws a single result from a weighted set. `randomGen` should be a
      function that generates a random value between 0 and 1, e.g. `Math.random`  
      Clamps the output of `randomGen` between 0.0 and 1.0</haxe_doc>
		</draw>
		<drawIndex public="1" params="A" set="method" line="73" static="1">
			<f a="dist:randomGen">
				<x path="interlude.ds.Weighted"><c path="drawIndex.A"/></x>
				<f a=""><x path="Float"/></f>
				<x path="Int"/>
			</f>
			<haxe_doc>Draws a result from a weighted set and returns its index. `randomGen`
      should be a function that generates a random value between 0 and 1, 
      e.g. `Math.random`  
      Clamps the output of `randomGen` between 0.0 and 1.0</haxe_doc>
		</drawIndex>
		<flatMap public="1" params="A:B" set="method" line="86" static="1">
			<f a="dist:fn">
				<x path="interlude.ds.Weighted"><c path="flatMap.A"/></x>
				<f a="">
					<c path="flatMap.A"/>
					<x path="interlude.ds.Weighted"><c path="flatMap.B"/></x>
				</f>
				<x path="interlude.ds.Weighted"><c path="flatMap.B"/></x>
			</f>
			<haxe_doc>Projects each element of a weighted distribution of `A` to a distribution
      of type `B`, and flattens the results  
      Monadic bind/flatMap</haxe_doc>
		</flatMap>
		<flatten public="1" params="A" set="method" line="92" static="1">
			<f a="dists">
				<x path="interlude.ds.Weighted"><x path="interlude.ds.Weighted"><c path="flatten.A"/></x></x>
				<x path="interlude.ds.Weighted"><c path="flatten.A"/></x>
			</f>
			<haxe_doc>Flattens one layer of a probability tree by multiplying weights together</haxe_doc>
		</flatten>
		<map public="1" params="A:B" set="method" line="102" static="1">
			<f a="dist:fn">
				<x path="interlude.ds.Weighted"><c path="map.A"/></x>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<x path="interlude.ds.Weighted"><c path="map.B"/></x>
			</f>
			<haxe_doc><![CDATA[Maps the `A` elements of a weighted distribution to a type `B` using `fn`  
      `[123.with(1)].map(x -> '$x')` == `['123'.with(1)]`]]></haxe_doc>
		</map>
		<normalize public="1" params="A" set="method" line="111" static="1">
			<f a="dist">
				<x path="interlude.ds.Weighted"><c path="normalize.A"/></x>
				<x path="interlude.ds.Weighted"><c path="normalize.A"/></x>
			</f>
			<haxe_doc>Normalizes large weights to numbers between 0 and 1  
      `['abc'.with(450), 'def'.with(50)].normalize()` == `['abc'.with(0.9), 'def'.with(0.1)]`</haxe_doc>
		</normalize>
		<show public="1" params="A" set="method" line="122" static="1">
			<f a="dist">
				<x path="interlude.ds.Weighted"><c path="show.A"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Pretty-prints the weights in a distribution</haxe_doc>
		</show>
		<uniform public="1" params="A" set="method" line="130" static="1">
			<f a="vals">
				<t path="Iterable"><c path="uniform.A"/></t>
				<x path="interlude.ds.Weighted"><c path="uniform.A"/></x>
			</f>
			<haxe_doc>Creates an even set of weights from a list of elements</haxe_doc>
		</uniform>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.func.Curry2" params="" file="src/interlude/func/Curry.hx" module="interlude.func.Curry">
		<curry public="1" params="A:B:Z" get="inline" set="null" line="10" static="1">
			<f a="fn">
				<f a=":">
					<c path="curry.A"/>
					<c path="curry.B"/>
					<c path="curry.Z"/>
				</f>
				<f a="">
					<c path="curry.A"/>
					<f a="">
						<c path="curry.B"/>
						<c path="curry.Z"/>
					</f>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 1 function of 2 arguments into 2 functions of 1 argument  
        `((a, b) -> a + b).curry()` == `a -> b -> a + b`]]></haxe_doc>
		</curry>
		<uncurry public="1" params="A:B:Z" get="inline" set="null" line="17" static="1">
			<f a="fn">
				<f a="">
					<c path="uncurry.A"/>
					<f a="">
						<c path="uncurry.B"/>
						<c path="uncurry.Z"/>
					</f>
				</f>
				<f a=":">
					<c path="uncurry.A"/>
					<c path="uncurry.B"/>
					<c path="uncurry.Z"/>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 2 functions of 1 argument into 1 function of 2 arguments  
        `(a -> b -> a + b).uncurry()` == `(a, b) -> a + b`]]></haxe_doc>
		</uncurry>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.func.Curry3" params="" file="src/interlude/func/Curry.hx" module="interlude.func.Curry">
		<curry public="1" params="A:B:C:Z" set="method" line="28" static="1">
			<f a="f">
				<f a="::">
					<c path="curry.A"/>
					<c path="curry.B"/>
					<c path="curry.C"/>
					<c path="curry.Z"/>
				</f>
				<f a="">
					<c path="curry.A"/>
					<f a="">
						<c path="curry.B"/>
						<f a="">
							<c path="curry.C"/>
							<c path="curry.Z"/>
						</f>
					</f>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 1 function of 3 arguments into 3 functions of 1 argument  
        `((a, b, c) -> a + b + c).curry()` == `a -> b -> c -> a + b + c`]]></haxe_doc>
		</curry>
		<uncurry public="1" params="A:B:C:Z" set="method" line="35" static="1">
			<f a="f">
				<f a="">
					<c path="uncurry.A"/>
					<f a="">
						<c path="uncurry.B"/>
						<f a="">
							<c path="uncurry.C"/>
							<c path="uncurry.Z"/>
						</f>
					</f>
				</f>
				<f a="::">
					<c path="uncurry.A"/>
					<c path="uncurry.B"/>
					<c path="uncurry.C"/>
					<c path="uncurry.Z"/>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 3 functions of 1 argument into 1 function of 3 arguments  
        `(a -> b -> c -> a + b + c).uncurry()` == `(a, b, c) -> a + b + c`]]></haxe_doc>
		</uncurry>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.func.Curry4" params="" file="src/interlude/func/Curry.hx" module="interlude.func.Curry">
		<curry public="1" params="A:B:C:D:Z" set="method" line="46" static="1">
			<f a="f">
				<f a=":::">
					<c path="curry.A"/>
					<c path="curry.B"/>
					<c path="curry.C"/>
					<c path="curry.D"/>
					<c path="curry.Z"/>
				</f>
				<f a="">
					<c path="curry.A"/>
					<f a="">
						<c path="curry.B"/>
						<f a="">
							<c path="curry.C"/>
							<f a="">
								<c path="curry.D"/>
								<c path="curry.Z"/>
							</f>
						</f>
					</f>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 1 function of 4 arguments into 4 functions of 1 argument  
        `((a, b, c, d) -> a + b + c + d).curry()` == `a -> b -> c -> d -> a + b + c + d`]]></haxe_doc>
		</curry>
		<uncurry public="1" params="A:B:C:D:Z" set="method" line="53" static="1">
			<f a="f">
				<f a="">
					<c path="uncurry.A"/>
					<f a="">
						<c path="uncurry.B"/>
						<f a="">
							<c path="uncurry.C"/>
							<f a="">
								<c path="uncurry.D"/>
								<c path="uncurry.Z"/>
							</f>
						</f>
					</f>
				</f>
				<f a=":::">
					<c path="uncurry.A"/>
					<c path="uncurry.B"/>
					<c path="uncurry.C"/>
					<c path="uncurry.D"/>
					<c path="uncurry.Z"/>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 4 functions of 1 argument into 1 function of 4 arguments  
        `(a -> b -> c -> d -> a + b + c + d).uncurry()` == `(a, b, c, d) -> a + b + c + d`]]></haxe_doc>
		</uncurry>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.func.Curry5" params="" file="src/interlude/func/Curry.hx" module="interlude.func.Curry">
		<curry public="1" params="A:B:C:D:E:Z" set="method" line="64" static="1">
			<f a="f">
				<f a="::::">
					<c path="curry.A"/>
					<c path="curry.B"/>
					<c path="curry.C"/>
					<c path="curry.D"/>
					<c path="curry.E"/>
					<c path="curry.Z"/>
				</f>
				<f a="">
					<c path="curry.A"/>
					<f a="">
						<c path="curry.B"/>
						<f a="">
							<c path="curry.C"/>
							<f a="">
								<c path="curry.D"/>
								<f a="">
									<c path="curry.E"/>
									<c path="curry.Z"/>
								</f>
							</f>
						</f>
					</f>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 1 function of 5 arguments into 5 functions of 1 argument  
        `((a, b, c, d, e) -> a + b + c + d + e).curry()` == `a -> b -> c -> d -> e -> a + b + c + d + e`]]></haxe_doc>
		</curry>
		<uncurry public="1" params="A:B:C:D:E:Z" set="method" line="71" static="1">
			<f a="f">
				<f a="">
					<c path="uncurry.A"/>
					<f a="">
						<c path="uncurry.B"/>
						<f a="">
							<c path="uncurry.C"/>
							<f a="">
								<c path="uncurry.D"/>
								<f a="">
									<c path="uncurry.E"/>
									<c path="uncurry.Z"/>
								</f>
							</f>
						</f>
					</f>
				</f>
				<f a="::::">
					<c path="uncurry.A"/>
					<c path="uncurry.B"/>
					<c path="uncurry.C"/>
					<c path="uncurry.D"/>
					<c path="uncurry.E"/>
					<c path="uncurry.Z"/>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 5 functions of 1 argument into 1 function of 5 arguments  
        `(a -> b -> c -> d -> e -> a + b + c + d + e).uncurry()` == `(a, b, c, d, e) -> a + b + c + d + e`]]></haxe_doc>
		</uncurry>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.func.Curry6" params="" file="src/interlude/func/Curry.hx" module="interlude.func.Curry">
		<curry public="1" params="A:B:C:D:E:F:Z" set="method" line="82" static="1">
			<f a="f">
				<f a=":::::">
					<c path="curry.A"/>
					<c path="curry.B"/>
					<c path="curry.C"/>
					<c path="curry.D"/>
					<c path="curry.E"/>
					<c path="curry.F"/>
					<c path="curry.Z"/>
				</f>
				<f a="">
					<c path="curry.A"/>
					<f a="">
						<c path="curry.B"/>
						<f a="">
							<c path="curry.C"/>
							<f a="">
								<c path="curry.D"/>
								<f a="">
									<c path="curry.E"/>
									<f a="">
										<c path="curry.F"/>
										<c path="curry.Z"/>
									</f>
								</f>
							</f>
						</f>
					</f>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 1 function of 6 arguments into 6 functions of 1 argument  
        `((a, b, c, d, e, f) -> a + b + c + d + e + f).curry()` == `a -> b -> c -> d -> e -> f-> a + b + c + d + e + f`]]></haxe_doc>
		</curry>
		<uncurry public="1" params="A:B:C:D:E:F:Z" set="method" line="89" static="1">
			<f a="fn">
				<f a="">
					<c path="uncurry.A"/>
					<f a="">
						<c path="uncurry.B"/>
						<f a="">
							<c path="uncurry.C"/>
							<f a="">
								<c path="uncurry.D"/>
								<f a="">
									<c path="uncurry.E"/>
									<f a="">
										<c path="uncurry.F"/>
										<c path="uncurry.Z"/>
									</f>
								</f>
							</f>
						</f>
					</f>
				</f>
				<f a=":::::">
					<c path="uncurry.A"/>
					<c path="uncurry.B"/>
					<c path="uncurry.C"/>
					<c path="uncurry.D"/>
					<c path="uncurry.E"/>
					<c path="uncurry.F"/>
					<c path="uncurry.Z"/>
				</f>
			</f>
			<haxe_doc><![CDATA[Convert 6 functions of 1 argument into 1 function of 6 arguments  
        `(a -> b -> c -> d -> e -> f -> a + b + c + d + e + f).uncurry()` == `(a, b, c, d, e, f) -> a + b + c + d + e + f`]]></haxe_doc>
		</uncurry>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.func.FunctionTools" params="" file="src/interlude/func/FunctionTools.hx">
		<ap public="1" params="A:B" get="inline" set="null" line="11" static="1">
			<f a="fn:a">
				<f a="">
					<c path="ap.A"/>
					<c path="ap.B"/>
				</f>
				<c path="ap.A"/>
				<c path="ap.B"/>
			</f>
			<haxe_doc>Calls a function with a single argument.  
        Can be called repeatedly if the return type is a function</haxe_doc>
		</ap>
		<flip public="1" params="A:B:C" get="inline" set="null" line="17" static="1">
			<f a="fn">
				<f a=":">
					<c path="flip.A"/>
					<c path="flip.B"/>
					<c path="flip.C"/>
				</f>
				<f a=":">
					<c path="flip.B"/>
					<c path="flip.A"/>
					<c path="flip.C"/>
				</f>
			</f>
			<haxe_doc>Swaps the order of two function arguments</haxe_doc>
		</flip>
		<gen public="1" params="A" get="inline" set="null" line="23" static="1">
			<f a="generator">
				<f a=""><c path="gen.A"/></f>
				<c path="gen.A"/>
			</f>
			<haxe_doc>Calls a function that generates a value from nothing</haxe_doc>
		</gen>
		<not public="1" params="A" get="inline" set="null" line="29" static="1">
			<f a="fn">
				<f a="">
					<c path="not.A"/>
					<x path="Bool"/>
				</f>
				<f a="">
					<c path="not.A"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Produces a function that inverts the result of a function returning `Bool`</haxe_doc>
		</not>
		<of public="1" params="A:B:C" get="inline" set="null" line="35" static="1">
			<f a="bc:ab">
				<f a="">
					<c path="of.B"/>
					<c path="of.C"/>
				</f>
				<f a="">
					<c path="of.A"/>
					<c path="of.B"/>
				</f>
				<f a="">
					<c path="of.A"/>
					<c path="of.C"/>
				</f>
			</f>
			<haxe_doc>Composes two functions</haxe_doc>
		</of>
		<to public="1" params="A:B:C" get="inline" set="null" line="41" static="1">
			<f a="ab:bc">
				<f a="">
					<c path="to.A"/>
					<c path="to.B"/>
				</f>
				<f a="">
					<c path="to.B"/>
					<c path="to.C"/>
				</f>
				<f a="">
					<c path="to.A"/>
					<c path="to.C"/>
				</f>
			</f>
			<haxe_doc>Composes two functions in reverse order, like a pipeline operator</haxe_doc>
		</to>
		<when public="1" params="A:B" get="inline" set="null" line="47" static="1">
			<f a="transform:predicate">
				<f a="">
					<c path="when.A"/>
					<c path="when.B"/>
				</f>
				<f a="">
					<c path="when.A"/>
					<x path="Bool"/>
				</f>
				<f a="">
					<c path="when.A"/>
					<t path="Option"><c path="when.B"/></t>
				</f>
			</f>
			<haxe_doc>Builds a function that returns a transformed value if it matches some `predicate`, or `None` if it doesn't</haxe_doc>
		</when>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<enum path="interlude.func.Trampoline" params="T" file="src/interlude/func/Trampoline.hx">
		<Done a="t"><c path="interlude.func.Trampoline.T"/></Done>
		<Continue a="f"><f a=""><e path="interlude.func.Trampoline"><c path="interlude.func.Trampoline.T"/></e></f></Continue>
		<haxe_doc>Represents a recursive computation that has been broken into chunks to
    avoid growing the stack  
    https://en.wikipedia.org/wiki/Tail_call#Through_trampolining</haxe_doc>
	</enum>
	<class path="interlude.func.TrampolineTools" params="" file="src/interlude/func/Trampoline.hx" module="interlude.func.Trampoline">
		<trampoline public="1" params="T" set="method" line="20" static="1">
			<f a="t">
				<e path="interlude.func.Trampoline"><c path="trampoline.T"/></e>
				<c path="trampoline.T"/>
			</f>
			<haxe_doc>Runs a recursive operation as an iterative one until it has been
        exhausted</haxe_doc>
		</trampoline>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.func.ValueTools" params="" file="src/interlude/func/ValueTools.hx">
		<add1 public="1" get="inline" set="null" line="7" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds 1 to an Int</haxe_doc>
		</add1>
		<add1f public="1" get="inline" set="null" line="11" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Adds 1.0 to a Float</haxe_doc>
		</add1f>
		<sub1 public="1" get="inline" set="null" line="18" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Subtracts 1 from an Int</haxe_doc>
		</sub1>
		<sub1f public="1" get="inline" set="null" line="22" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Subtracts 1.0 from a Float</haxe_doc>
		</sub1f>
		<discard public="1" params="A" get="inline" set="null" line="26" static="1">
			<f a="_">
				<c path="discard.A"/>
				<x path="Void"/>
			</f>
			<haxe_doc>An extension that drops its value into a Void</haxe_doc>
		</discard>
		<discardWithPos public="1" params="A" get="inline" set="null" line="30" static="1">
			<f a="_:?pos">
				<c path="discardWithPos.A"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An extension that drops its value and position info into a Void</haxe_doc>
		</discardWithPos>
		<doNothing public="1" get="inline" set="null" line="34" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>A no-op function</haxe_doc>
		</doNothing>
		<equals public="1" params="A" get="inline" set="null" line="38" static="1">
			<f a="x:y">
				<c path="equals.A"/>
				<c path="equals.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Composable version of the `==` operator</haxe_doc>
		</equals>
		<identity public="1" params="A" get="inline" set="null" line="45" static="1">
			<f a="a">
				<c path="identity.A"/>
				<c path="identity.A"/>
			</f>
			<haxe_doc>A function that always returns its input unchanged  
        `Some(123).map(identity)` == `Some(123)`</haxe_doc>
		</identity>
		<keyedWith public="1" params="K:V" get="inline" set="null" line="52" static="1">
			<f a="value:key">
				<c path="keyedWith.V"/>
				<c path="keyedWith.K"/>
				<t path="KeyValuePair">
					<c path="keyedWith.K"/>
					<c path="keyedWith.V"/>
				</t>
			</f>
			<haxe_doc>Composable way to create a Key/Value pair  
        `"abc".keyedWith(123)` == `{ key: 123, value: "abc" }`</haxe_doc>
		</keyedWith>
		<keyFor public="1" params="K:V" get="inline" set="null" line="59" static="1">
			<f a="key:value">
				<c path="keyFor.K"/>
				<c path="keyFor.V"/>
				<t path="KeyValuePair">
					<c path="keyFor.K"/>
					<c path="keyFor.V"/>
				</t>
			</f>
			<haxe_doc>Composable way to create a Key/Value pair  
        `123.keyFor("abc")` == `{ key: 123, value: "abc" }`</haxe_doc>
		</keyFor>
		<let public="1" params="T:K" get="inline" set="null" line="67" static="1">
			<f a="v:transformer">
				<c path="let.T"/>
				<f a="">
					<c path="let.T"/>
					<c path="let.K"/>
				</f>
				<c path="let.K"/>
			</f>
			<haxe_doc>Fluent method for transforming a value  
        Similar to `map` but for any value  
        `123.let(Std.string)` == `"123"`</haxe_doc>
		</let>
		<mut public="1" params="T" get="inline" set="null" line="74" static="1">
			<f a="v:mutator">
				<c path="mut.T"/>
				<f a="">
					<c path="mut.T"/>
					<x path="Void"/>
				</f>
				<c path="mut.T"/>
			</f>
			<haxe_doc>Fluent method for mutating a value or whatever else  
        Similar to `mutate` but for any value</haxe_doc>
		</mut>
		<notb public="1" get="inline" set="null" line="80" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Composable version of the `!` (not) operator</haxe_doc>
		</notb>
		<notEquals public="1" params="A" get="inline" set="null" line="84" static="1">
			<f a="x:y">
				<c path="notEquals.A"/>
				<c path="notEquals.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Composable version of the `!=` operator</haxe_doc>
		</notEquals>
		<v_ public="1" params="A:B" set="method" line="91" static="1">
			<f a="value:input">
				<c path="v_.A"/>
				<c path="v_.B"/>
				<c path="v_.A"/>
			</f>
			<haxe_doc>An extension that always returns the original value and drops any input  
        `69.v_("nice")` == `69`</haxe_doc>
		</v_>
		<_n public="1" params="A:B" set="method" line="98" static="1">
			<f a="value:input">
				<c path="_n.A"/>
				<c path="_n.B"/>
				<c path="_n.B"/>
			</f>
			<haxe_doc>An extension that always returns some input and drops the original value  
        `69._n("nice")` == `"nice"`</haxe_doc>
		</_n>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.iter.IterableTools" params="" file="src/interlude/iter/IterableTools.hx">
		<all public="1" params="A" set="method" line="11" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="all.A"/></t>
				<f a="">
					<c path="all.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if all elements of `as` satisfy a `predicate`  
        `[true, true, true].all(isTrue)` == `true`  
        `[true, false, true].all(isTrue)` == `false`</haxe_doc>
		</all>
		<all2 public="1" params="A:B" set="method" line="19" static="1">
			<f a="as:bs:predicate">
				<t path="Iterable"><c path="all2.A"/></t>
				<t path="Iterable"><c path="all2.B"/></t>
				<f a=":">
					<c path="all2.A"/>
					<c path="all2.B"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if corresponding pairs of `as` and `bs` satisfy a predicate  
        `[1, 2, 3].all2([1, 2, 3], equals)` == `true`  
        `[1, 2, 3].all2([4, 2, 0], equals)` == `false`</haxe_doc>
		</all2>
		<and public="1" set="method" line="25" static="1">
			<f a="bs">
				<t path="Iterable"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if every element is `true` or if `bs` is empty</haxe_doc>
		</and>
		<any public="1" params="A" set="method" line="31" static="1">
			<f a="as">
				<t path="Iterable"><c path="any.A"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `as` is not empty</haxe_doc>
		</any>
		<anyMatch public="1" params="A" set="method" line="39" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="anyMatch.A"/></t>
				<f a="">
					<c path="anyMatch.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if any element in `as` matches a `predicate`  
        *NOTE*: This will evaluate `as` until a match is found or `as` is exhausted, 
        so be careful with infinite `Iterable`s</haxe_doc>
		</anyMatch>
		<ap public="1" params="A:B" set="method" line="58" static="1">
			<f a="fns:as">
				<t path="Iterable"><f a="">
	<c path="ap.A"/>
	<c path="ap.B"/>
</f></t>
				<t path="Iterable"><c path="ap.A"/></t>
				<t path="Iterable"><c path="ap.B"/></t>
			</f>
			<haxe_doc><![CDATA[Experimental  
        Apply a set of functions to each element of `as`. Can be called
        repeatedly if the return type is a function.

        ```haxe
        [ a -> b -> a + b
        , a -> b -> a - b
        ].ap([1, 2])
         .ap([3, 4])

           | --------- a + b  -------- | --------  a - b  ------- |  
        == [(1+3), (1+4), (2+3), (2+4), (1-3), (1-4), (2-3), (2-4)]  
        == [  4,     5,     5,     6,    -2,    -3,    -1,    -2]
        ```]]></haxe_doc>
		</ap>
		<append public="1" params="A" set="method" line="66" static="1">
			<f a="as:with">
				<t path="Iterable"><c path="append.A"/></t>
				<t path="Iterable"><c path="append.A"/></t>
				<t path="Iterable"><c path="append.A"/></t>
			</f>
			<haxe_doc>Returns a new `Iterable` that appends `with` onto the end of `as`  
        See [Lambda.concat](https://api.haxe.org/Lambda.html#concat)  
        `[1, 2, 3].append([4, 5, 6])` == `[1, 2, 3, 4, 5, 6]`</haxe_doc>
		</append>
		<asIterable public="1" params="A" get="inline" set="null" line="80" static="1">
			<f a="a:rest">
				<c path="asIterable.A"/>
				<x path="haxe.Rest"><c path="asIterable.A"/></x>
				<t path="Iterable"><c path="asIterable.A"/></t>
			</f>
			<haxe_doc>Converts a single element to an `Iterable` containing that element  
        TODO: should this return `Iterable1`?</haxe_doc>
		</asIterable>
		<atWrappedIndex public="1" params="A" set="method" line="91" static="1">
			<f a="as:index">
				<t path="Iterable"><c path="atWrappedIndex.A"/></t>
				<x path="Int"/>
				<t path="Option"><c path="atWrappedIndex.A"/></t>
			</f>
			<haxe_doc>If `as` has any elements, returns the element at a positive `index`  
        Wraps around to the beginning if `index` is out of bounds  
        `[1, 2, 3].atWrappedIndex(1)` == `Some(2)`  
        `[1, 2, 3].atWrappedUndex(10)` == `Some(2)`  
        `[1].atWrappedIndex(100)` == `Some(1)`  
        `[].atWrappedIndex(1000)` == `None`</haxe_doc>
		</atWrappedIndex>
		<choice public="1" params="A" set="method" line="97" static="1">
			<f a="as:genRandom">
				<t path="Iterable"><c path="choice.A"/></t>
				<f a=""><x path="Float"/></f>
				<t path="Option"><c path="choice.A"/></t>
			</f>
			<haxe_doc>If possible, draws a random element from `as`, using `genRandom` as a source of randomness</haxe_doc>
		</choice>
		<choiceStd public="1" params="A" get="inline" set="null" line="104" static="1">
			<f a="as">
				<t path="Iterable"><c path="choiceStd.A"/></t>
				<t path="Option"><c path="choiceStd.A"/></t>
			</f>
			<haxe_doc>If possible, draws a random element from `as`, using `Math.random` as a source of randomness</haxe_doc>
		</choiceStd>
		<cons public="1" params="A" get="inline" set="null" line="110" static="1">
			<f a="a:as">
				<c path="cons.A"/>
				<t path="Iterable"><c path="cons.A"/></t>
				<t path="Iterable"><c path="cons.A"/></t>
			</f>
			<haxe_doc>Adds a value to the front of an `Iterable`</haxe_doc>
		</cons>
		<contains public="1" params="A" set="method" line="118" static="1">
			<f a="as:a">
				<t path="Iterable"><c path="contains.A"/></t>
				<c path="contains.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `a` is present in `as`  
        *NOTE*: This will evaluate `as` until if finds `a` or `as` is exhausted,  
        so be careful with infinite `Iterable`s</haxe_doc>
		</contains>
		<count public="1" params="A" set="method" line="125" static="1">
			<f a="as">
				<t path="Iterable"><c path="count.A"/></t>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts the number of elements in `as`  
        *NOTE*: This will fully evaluate `as`, so be careful with infinite `Iterable`s</haxe_doc>
		</count>
		<cycle public="1" params="A" set="method" line="135" static="1">
			<f a="as">
				<t path="Iterable"><c path="cycle.A"/></t>
				<t path="Iterable"><c path="cycle.A"/></t>
			</f>
			<haxe_doc>Infinitely repeats an `Iterable`  
        `[6, 9].cycle()` == `[6, 9, 6, 9, 6, ...]`</haxe_doc>
		</cycle>
		<distribute public="1" params="A:B" set="method" line="161" static="1">
			<f a="fn:seed">
				<f a="">
					<c path="distribute.A"/>
					<t path="Option"><t path="Pair">
	<c path="distribute.B"/>
	<c path="distribute.A"/>
</t></t>
				</f>
				<c path="distribute.A"/>
				<t path="Iterable"><c path="distribute.B"/></t>
			</f>
			<haxe_doc><![CDATA[A lazy `unfold` operation, which produces an `Iterable` from an initial
        seed. The opposite of `foldl` (which reduces an `Iterable` to a single
        value)  
        ```haxe
        (x -> x == 0 
            ? None
            : Some(x.with(x - 1))
        ).distribute(5)

        == [5, 4, 3, 2, 1]
        ```]]></haxe_doc>
		</distribute>
		<elementAt public="1" params="A" set="method" line="181" static="1">
			<f a="as:index">
				<t path="Iterable"><c path="elementAt.A"/></t>
				<x path="Int"/>
				<t path="Option"><c path="elementAt.A"/></t>
			</f>
			<haxe_doc>If possible, returns an element from `as` at a specified `index`  
        `[1, 2, 3].elementAt(1)` == `Some(2)`  
        `[1, 2, 3].elementAt(10)` == `None`  
        `[].elementAt(100)` == `None`</haxe_doc>
		</elementAt>
		<empty public="1" params="A" set="method" line="188" static="1">
			<f a=""><t path="Iterable"><c path="empty.A"/></t></f>
			<haxe_doc>Returns an empty `Iterable`</haxe_doc>
		</empty>
		<enumerate public="1" params="A" get="inline" set="null" line="195" static="1">
			<f a="as">
				<t path="Iterable"><c path="enumerate.A"/></t>
				<t path="Iterable"><t path="Pair">
	<x path="Int"/>
	<c path="enumerate.A"/>
</t></t>
			</f>
			<haxe_doc>An alternative to `indexed`. Pairs every element of `as` with its index</haxe_doc>
		</enumerate>
		<every public="1" params="A" set="method" line="202" static="1">
			<f a="as:n">
				<t path="Iterable"><c path="every.A"/></t>
				<x path="Int"/>
				<t path="Iterable"><t path="Iterable"><c path="every.A"/></t></t>
			</f>
			<haxe_doc><![CDATA[Splits `as` into chunks of size `n`  
        If `n <= 0`, returns an empty `Iterable`]]></haxe_doc>
		</every>
		<except public="1" params="A" set="method" line="215" static="1">
			<f a="as:except">
				<t path="Iterable"><c path="except.A"/></t>
				<c path="except.A"/>
				<t path="Iterable"><c path="except.A"/></t>
			</f>
			<haxe_doc>Returns elements of `as` that are not equal to `except`</haxe_doc>
		</except>
		<excepts public="1" params="A" set="method" line="221" static="1">
			<f a="as:except">
				<t path="Iterable"><c path="excepts.A"/></t>
				<t path="Iterable"><c path="excepts.A"/></t>
				<t path="Iterable"><c path="excepts.A"/></t>
			</f>
			<haxe_doc>Returns elements of `as` that do not appear in `except`</haxe_doc>
		</excepts>
		<filterL public="1" params="A" set="method" line="227" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="filterL.A"/></t>
				<f a="">
					<c path="filterL.A"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="filterL.A"/></t>
			</f>
			<haxe_doc>Returns elements of `as` that satisfy some `predicate`</haxe_doc>
		</filterL>
		<filterMap public="1" params="A:B" set="method" line="239" static="1">
			<f a="as:predicate:fn">
				<t path="Iterable"><c path="filterMap.A"/></t>
				<f a="">
					<c path="filterMap.A"/>
					<x path="Bool"/>
				</f>
				<f a="">
					<c path="filterMap.A"/>
					<c path="filterMap.B"/>
				</f>
				<t path="Iterable"><c path="filterMap.B"/></t>
			</f>
			<haxe_doc>A fused combination of `filter` and `map`</haxe_doc>
		</filterMap>
		<filterFMap public="1" params="A:B" set="method" line="251" static="1">
			<f a="as:predicate:fn">
				<t path="Iterable"><c path="filterFMap.A"/></t>
				<f a="">
					<c path="filterFMap.A"/>
					<x path="Bool"/>
				</f>
				<f a="">
					<c path="filterFMap.A"/>
					<t path="Iterable"><c path="filterFMap.B"/></t>
				</f>
				<t path="Iterable"><c path="filterFMap.B"/></t>
			</f>
			<haxe_doc>A fused combination of `filter` and `flatMap`</haxe_doc>
		</filterFMap>
		<firstOrDefault public="1" params="A" set="method" line="275" static="1">
			<f a="as:genDefault">
				<t path="Iterable"><c path="firstOrDefault.A"/></t>
				<f a=""><c path="firstOrDefault.A"/></f>
				<c path="firstOrDefault.A"/>
			</f>
			<haxe_doc>Returns the first element of `as` or a default value if `as` is empty</haxe_doc>
		</firstOrDefault>
		<firstMatch public="1" params="A" set="method" line="283" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="firstMatch.A"/></t>
				<f a="">
					<c path="firstMatch.A"/>
					<x path="Bool"/>
				</f>
				<t path="Option"><c path="firstMatch.A"/></t>
			</f>
			<haxe_doc>If possible, returns the first value of `as` that matches some `predicate`  
        *NOTE*: This will evaluate `as` until it finds a match or `as` is exhausted, 
        so be careful with infinite `Iterable`s</haxe_doc>
		</firstMatch>
		<flatMap public="1" params="A:B" set="method" line="293" static="1">
			<f a="as:fn">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<t path="Iterable"><c path="flatMap.B"/></t>
			</f>
			<haxe_doc><![CDATA[Projects each element of `as` into an `Iterable` of `B`s using `fn` as 
        a transform, and flattens the results into a single `Iterable`  
        This version is lazy  
        See [Lambda.flatMap](https://api.haxe.org/Lambda.html#flatMap)  
        `[1, 2, 3].flatMap(x -> x.replicate(3))` == `[1, 1, 1, 2, 2, 2, 3, 3, 3]`]]></haxe_doc>
		</flatMap>
		<flatMapS public="1" params="A:B" set="method" line="321" static="1">
			<f a="as:fn">
				<t path="Iterable"><c path="flatMapS.A"/></t>
				<f a="">
					<c path="flatMapS.A"/>
					<t path="Iterable"><c path="flatMapS.B"/></t>
				</f>
				<c path="Array"><c path="flatMapS.B"/></c>
			</f>
			<haxe_doc><![CDATA[Projects each element of `as` into an `Iterable` of `B`s using `fn` as 
        a transform, and flattens the results into a single `Iterable`  
        This version is strict  
        See [Lambda.flatMap](https://api.haxe.org/Lambda.html#flatMap)  
        `[1, 2, 3].flatMapS(x -> x.replicate(3))` == `[1, 1, 1, 2, 2, 2, 3, 3, 3]`]]></haxe_doc>
		</flatMapS>
		<flatten public="1" params="A" set="method" line="329" static="1">
			<f a="ass">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<t path="Iterable"><c path="flatten.A"/></t>
			</f>
			<haxe_doc>Appends one level of nested `Iterable`s together  
        `[[1, 2, 3], [4, 5, 6], [7, 8, 9]].flatten()` == `[1, 2, 3, 4, 5, 6, 7, 8, 9]`  
        `[].flatten()` == `[]`</haxe_doc>
		</flatten>
		<foldl public="1" params="A:B" set="method" line="340" static="1">
			<f a="as:seed:fn">
				<t path="Iterable"><c path="foldl.A"/></t>
				<c path="foldl.B"/>
				<f a="accumulator:current">
					<c path="foldl.B"/>
					<c path="foldl.A"/>
					<c path="foldl.B"/>
				</f>
				<c path="foldl.B"/>
			</f>
			<haxe_doc><![CDATA[Applies `fn` over elements of `as` using `seed` as an initial value,
        reducing an `Iterable` to a single value. This version is left-associative  
        See [Lambda.fold](https://api.haxe.org/Lambda.html#fold)  
        `[1, 2, 3, 4, 5].foldl(0, (x, y) -> x + y)` == `0+1+2+3+4+5` == `15`  
        `[].foldl(0, (x, y) -> x + y)` == `0`  
        *NOTE*: This may not terminate with an infinite `Iterable`]]></haxe_doc>
		</foldl>
		<foldr public="1" params="A:B" set="method" line="354" static="1">
			<f a="as:seed:fn">
				<t path="Iterable"><c path="foldr.A"/></t>
				<c path="foldr.B"/>
				<f a="current:accumulator">
					<c path="foldr.A"/>
					<c path="foldr.B"/>
					<c path="foldr.B"/>
				</f>
				<c path="foldr.B"/>
			</f>
			<haxe_doc><![CDATA[Applies `fn` over elements of `as` using `seed` as an initial value,
        reducing an `Iterable` to a single value. This version is right-associative  
        `[1, 2, 3, 4, 5].foldl(0, (x, y) -> x + y)` == `0+5+4+3+2+1` == `15`  
        `[].foldr(0, (x, y) -> x + y)` == `0`  
        *NOTE*: This may not terminate with an infinite `Iterable`]]></haxe_doc>
		</foldr>
		<indexed public="1" params="A" set="method" line="367" static="1">
			<f a="as">
				<t path="Iterable"><c path="indexed.A"/></t>
				<t path="KeyValueIterable">
					<x path="Int"/>
					<c path="indexed.A"/>
				</t>
			</f>
			<haxe_doc>An alternative to `enumerate`. Converts a plain `Iterable` to one that
        maintains an index for each element.</haxe_doc>
		</indexed>
		<indices public="1" get="inline" set="null" line="375" static="1">
			<f a=""><t path="Iterable"><x path="Int"/></t></f>
			<haxe_doc><![CDATA[Returns an `Iterable` containing every `Int` >= 0  
        In theory this is infinite; in practice it will overflow MAX_INT]]></haxe_doc>
		</indices>
		<init public="1" params="A" set="method" line="382" static="1">
			<f a="as">
				<t path="Iterable"><c path="init.A"/></t>
				<t path="Iterable"><c path="init.A"/></t>
			</f>
			<meta><m n=":nullSafety"><e>Off</e></m></meta>
			<haxe_doc>Returns all elements of `as` except the last one</haxe_doc>
		</init>
		<intercalate public="1" params="A" set="method" line="396" static="1">
			<f a="ass:separator">
				<t path="Iterable"><t path="Iterable"><c path="intercalate.A"/></t></t>
				<t path="Iterable"><c path="intercalate.A"/></t>
				<t path="Iterable"><c path="intercalate.A"/></t>
			</f>
			<haxe_doc>Inserts `separator` in between `Iterable`s and flattens the result  
        `[[1, 2], [3, 4], [5, 6]].intercalate([0, 0])` == `[1, 2, 0, 0, 3, 4, 0, 0, 5, 6]`</haxe_doc>
		</intercalate>
		<intersperse public="1" params="A" set="method" line="404" static="1">
			<f a="as:separator">
				<t path="Iterable"><c path="intersperse.A"/></t>
				<c path="intersperse.A"/>
				<t path="Iterable"><c path="intersperse.A"/></t>
			</f>
			<haxe_doc>Returns an `Iterable` with `separator` interspersed between every
        element of `as`  
        `[1, 2, 3, 4].intersperse(0)` == `[1, 0, 2, 0, 3, 0, 4]`</haxe_doc>
		</intersperse>
		<isEmpty public="1" params="A" get="inline" set="null" line="419" static="1">
			<f a="as">
				<t path="Iterable"><c path="isEmpty.A"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` iff `as` does not have any elements</haxe_doc>
		</isEmpty>
		<iterate public="1" params="A" set="method" line="427" static="1">
			<f a="a:fn">
				<c path="iterate.A"/>
				<f a="">
					<c path="iterate.A"/>
					<c path="iterate.A"/>
				</f>
				<t path="Iterable"><c path="iterate.A"/></t>
			</f>
			<haxe_doc>Creates an infinite sequence of `T` values by applying `fn` to the first
      value, then to the result of that, then...  
      `iterate(0, add1)` == `[x, f(x), f(f(x)), f(f(f(x))), ...]` == `[0, 1, 2, 3, 4, 5, ...]`</haxe_doc>
		</iterate>
		<lastMatch public="1" params="A" set="method" line="444" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="lastMatch.A"/></t>
				<f a="">
					<c path="lastMatch.A"/>
					<x path="Bool"/>
				</f>
				<t path="Option"><c path="lastMatch.A"/></t>
			</f>
			<haxe_doc>If possible, returns the last value of `as` that matches some
        `predicate`  
        *NOTE*: This will evaluate `as` until it finds a match or `as` is
        exhausted, so be careful with infinite `Iterable`s</haxe_doc>
		</lastMatch>
		<mapL public="1" params="A:B" set="method" line="453" static="1">
			<f a="as:fn">
				<t path="Iterable"><c path="mapL.A"/></t>
				<f a="">
					<c path="mapL.A"/>
					<c path="mapL.B"/>
				</f>
				<t path="Iterable"><c path="mapL.B"/></t>
			</f>
			<haxe_doc>Projects `as` into and `Iterable` of `B`s using `fn` as a transform  
        See [Lambda.map](https://api.haxe.org/Lambda.html#map)  
        This version is lazy  
        `[1, 2, 3].mapL(Std.string)` == `['1', '2', '3']`</haxe_doc>
		</mapL>
		<mapS public="1" params="A:B" set="method" line="468" static="1">
			<f a="as:fn">
				<t path="Iterable"><c path="mapS.A"/></t>
				<f a="">
					<c path="mapS.A"/>
					<c path="mapS.B"/>
				</f>
				<c path="Array"><c path="mapS.B"/></c>
			</f>
			<haxe_doc>Projects `as` into and `Iterable` of `B`s using `fn` as a transform  
        See [Lambda.map](https://api.haxe.org/Lambda.html#map)  
        This version is strict  
        `[1, 2, 3].mapS(Std.string)` == `['1', '2', '3']`</haxe_doc>
		</mapS>
		<mapMaybes public="1" params="A:B" set="method" line="475" static="1">
			<f a="as:transform">
				<t path="Iterable"><t path="Option"><c path="mapMaybes.A"/></t></t>
				<f a="">
					<c path="mapMaybes.A"/>
					<c path="mapMaybes.B"/>
				</f>
				<t path="Iterable"><c path="mapMaybes.B"/></t>
			</f>
			<haxe_doc>A version of `mapL` that can discard elements.  Only `Some` values are
        `transform`ed and returned in the output.</haxe_doc>
		</mapMaybes>
		<mapOutcomes public="1" params="A:B" set="method" line="482" static="1">
			<f a="as:transform">
				<t path="Iterable"><t path="Outcome"><c path="mapOutcomes.A"/></t></t>
				<f a="">
					<c path="mapOutcomes.A"/>
					<c path="mapOutcomes.B"/>
				</f>
				<t path="Iterable"><c path="mapOutcomes.B"/></t>
			</f>
			<haxe_doc>A version of `mapL` that can discard elements.  Only `Success` values
        are `transform`ed and returned in the output.</haxe_doc>
		</mapOutcomes>
		<maybeFirst public="1" params="A" set="method" line="490" static="1">
			<f a="as">
				<t path="Iterable"><c path="maybeFirst.A"/></t>
				<t path="Option"><c path="maybeFirst.A"/></t>
			</f>
			<haxe_doc>Attempts to get the first element of `as`, if there is one  
        `[a, b, c].maybeFirst()` == `Some(a)`  
        `[].maybeFirst()` == `None`</haxe_doc>
		</maybeFirst>
		<maybeLast public="1" params="A" set="method" line="503" static="1">
			<f a="as">
				<t path="Iterable"><c path="maybeLast.A"/></t>
				<t path="Option"><c path="maybeLast.A"/></t>
			</f>
			<haxe_doc>Attempts to get the last element of `as`, if there is one  
        `[a, b, c].maybeLast()` == `Some(c)`  
        `[].maybeLast()` == `None`  
        *NOTE*: this will not terminate if `as` is infinite</haxe_doc>
		</maybeLast>
		<mutate public="1" params="A" get="inline" set="null" line="514" static="1">
			<f a="as:mutator">
				<t path="Iterable"><c path="mutate.A"/></t>
				<f a="">
					<c path="mutate.A"/>
					<x path="Void"/>
				</f>
				<t path="Iterable"><c path="mutate.A"/></t>
			</f>
			<haxe_doc>Calls `mutator` on every element of `as`. Essentially a `for` loop
        specifically for mutating values</haxe_doc>
		</mutate>
		<mutatei public="1" params="A" set="method" line="524" static="1">
			<f a="as:mutator">
				<t path="Iterable"><c path="mutatei.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mutatei.A"/>
					<x path="Void"/>
				</f>
				<t path="Iterable"><c path="mutatei.A"/></t>
			</f>
			<haxe_doc>Calls `mutator` on every element of `as` and their indices. Essentially
        a `for` loop specifically for mutating values</haxe_doc>
		</mutatei>
		<natural public="1" get="inline" set="null" line="535" static="1">
			<f a=""><t path="Iterable"><x path="Int"/></t></f>
			<haxe_doc>Returns an infinite `Iterable` of natural numbers  
      `natural()` == `[1, 2, 3, 4, 5, 6, ...]`</haxe_doc>
		</natural>
		<opposite public="1" params="A" set="method" line="538" static="1"><f a="as">
	<t path="Iterable"><c path="opposite.A"/></t>
	<c path="Array"><c path="opposite.A"/></c>
</f></opposite>
		<orDefault public="1" params="A" set="method" line="548" static="1">
			<f a="as:whenEmpty">
				<t path="Iterable"><c path="orDefault.A"/></t>
				<f a=""><t path="Iterable"><c path="orDefault.A"/></t></f>
				<t path="Iterable"><c path="orDefault.A"/></t>
			</f>
			<haxe_doc>Returns the input Iterable if it has any elements, or some default if
      empty</haxe_doc>
		</orDefault>
		<orDefault1 public="1" params="A" set="method" line="556" static="1">
			<f a="as:whenEmpty">
				<t path="Iterable"><c path="orDefault1.A"/></t>
				<f a=""><t path="Iterable1"><c path="orDefault1.A"/></t></f>
				<t path="Iterable"><c path="orDefault1.A"/></t>
			</f>
			<haxe_doc>Returns the input Iterable if it has any elements, or some default if empty
      The default is required to have at least one element</haxe_doc>
		</orDefault1>
		<orderByAsc public="1" params="A" set="method" line="560" static="1"><f a="as:selector">
	<t path="Iterable"><c path="orderByAsc.A"/></t>
	<f a="">
		<c path="orderByAsc.A"/>
		<x path="Int"/>
	</f>
	<c path="Array"><c path="orderByAsc.A"/></c>
</f></orderByAsc>
		<orderByDesc public="1" params="A" set="method" line="563" static="1"><f a="as:selector">
	<t path="Iterable"><c path="orderByDesc.A"/></t>
	<f a="">
		<c path="orderByDesc.A"/>
		<x path="Int"/>
	</f>
	<c path="Array"><c path="orderByDesc.A"/></c>
</f></orderByDesc>
		<orElse public="1" params="A" set="method" line="566" static="1"><f a="as:genOther">
	<t path="Iterable"><c path="orElse.A"/></t>
	<f a=""><t path="Iterable"><c path="orElse.A"/></t></f>
	<t path="Iterable"><c path="orElse.A"/></t>
</f></orElse>
		<pairs public="1" params="A" set="method" line="574" static="1">
			<f a="as">
				<t path="Iterable"><c path="pairs.A"/></t>
				<t path="Iterable"><t path="Pair">
	<c path="pairs.A"/>
	<c path="pairs.A"/>
</t></t>
			</f>
			<haxe_doc>Common use of `zip`, useful for comparing an element with the next one  
        `[1, 2, 3, 4].pairs()` == `[(1, 2), (2, 3), (3, 4)]`</haxe_doc>
		</pairs>
		<partition public="1" params="A" set="method" line="582" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="partition.A"/></t>
				<f a="">
					<c path="partition.A"/>
					<x path="Bool"/>
				</f>
				<t path="Pair">
					<c path="Array"><c path="partition.A"/></c>
					<c path="Array"><c path="partition.A"/></c>
				</t>
			</f>
			<haxe_doc>Splits an `Iterable` into two subarrays based on a `predicate`  
      `0.iterate(add1).partition(isEven)` == ([0, 2, 4, ...], [1, 3, 5, ...])
      TODO: add a lazy version that doesn't evaluate the source list twice</haxe_doc>
		</partition>
		<product public="1" params="A:B:C" set="method" line="597" static="1">
			<f a="as:bs:fn">
				<t path="Iterable"><c path="product.A"/></t>
				<t path="Iterable"><c path="product.B"/></t>
				<f a=":">
					<c path="product.A"/>
					<c path="product.B"/>
					<c path="product.C"/>
				</f>
				<t path="Iterable"><c path="product.C"/></t>
			</f>
			<haxe_doc>Cartesian product of two `Iterable`s  
        A deck of playing cards could be represented as
        `suits.product(ranks, Card.new)`</haxe_doc>
		</product>
		<range public="1" get="inline" set="null" line="605" static="1">
			<f a="start:count">
				<x path="Int"/>
				<x path="Int"/>
				<t path="Iterable"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns an `Iterable` containing a range of numbers between `start` and
        `start+count`  
        `0.range(5)` == `[0, 1, 2, 3, 4]`</haxe_doc>
		</range>
		<repeat public="1" params="A" set="method" line="611" static="1">
			<f a="a">
				<c path="repeat.A"/>
				<t path="Iterable"><c path="repeat.A"/></t>
			</f>
			<haxe_doc>Returns an `Iterable` where `a` is infinitely repeated</haxe_doc>
		</repeat>
		<replicate public="1" params="A" set="method" line="617" static="1">
			<f a="a:count">
				<c path="replicate.A"/>
				<x path="Int"/>
				<t path="Iterable"><c path="replicate.A"/></t>
			</f>
			<haxe_doc>Returns an `Iterable` where `a` is repeated `count` times</haxe_doc>
		</replicate>
		<scan public="1" params="A:B" set="method" line="626" static="1">
			<f a="as:seed:fn">
				<t path="Iterable"><c path="scan.A"/></t>
				<c path="scan.B"/>
				<f a=":">
					<c path="scan.B"/>
					<c path="scan.A"/>
					<c path="scan.B"/>
				</f>
				<t path="Iterable"><c path="scan.B"/></t>
			</f>
			<haxe_doc><![CDATA[Applies `fn` to each element of `as`, passing an accumulator value through
      the computation  
      This version includes the seed as the first element of the output  
      `[0, 1, 2, 3].scan(1, (x, y) -> x + y)` == `[1, 1, 2, 4, 7]`]]></haxe_doc>
		</scan>
		<scan_ public="1" params="A:B" set="method" line="635" static="1">
			<f a="as:seed:fn">
				<t path="Iterable"><c path="scan_.A"/></t>
				<c path="scan_.B"/>
				<f a=":">
					<c path="scan_.B"/>
					<c path="scan_.A"/>
					<c path="scan_.B"/>
				</f>
				<t path="Iterable"><c path="scan_.B"/></t>
			</f>
			<haxe_doc><![CDATA[Applies `fn` to each element of `as`, passing an accumulator value through
      the computation  
      This version does not include the seed in the output  
      `[0, 1, 2, 3].scan_(1, (x, y) -> x + y)` == `[1, 2, 4, 7]`]]></haxe_doc>
		</scan_>
		<shuffled public="1" params="A" set="method" line="649" static="1">
			<f a="as:genRandom">
				<t path="Iterable"><c path="shuffled.A"/></t>
				<f a="">
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="shuffled.A"/></c>
			</f>
			<haxe_doc>Returns elements of `as` in a random order, using `genRandom` as a
        source of randomness</haxe_doc>
		</shuffled>
		<shuffledStd public="1" params="A" get="inline" set="null" line="658" static="1">
			<f a="as">
				<t path="Iterable"><c path="shuffledStd.A"/></t>
				<c path="Array"><c path="shuffledStd.A"/></c>
			</f>
			<haxe_doc>Returns elements of `as` in a random order, using `Std.random` as a
        source of randomness</haxe_doc>
		</shuffledStd>
		<skip public="1" params="A" set="method" line="667" static="1">
			<f a="as:count">
				<t path="Iterable"><c path="skip.A"/></t>
				<x path="Int"/>
				<t path="Iterable"><c path="skip.A"/></t>
			</f>
			<haxe_doc><![CDATA[Returns all of the elements of `as` after the first `count` items  
      If `as` has <= `count` items, return empty list  
      `[a, b, c].skip(2)` == `[c]`  
      `[a, b, c].skip(200)` == `[]`]]></haxe_doc>
		</skip>
		<skipWhile public="1" params="A" set="method" line="685" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="skipWhile.A"/></t>
				<f a="">
					<c path="skipWhile.A"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="skipWhile.A"/></t>
			</f>
			<haxe_doc><![CDATA[Skips elements of `as` until they no longer match `predicate`  
      If all elements match, returns an empty `Iterable`  
      `[1, 2, 3, 4].skipWhile(x -> x < 3)` == `[3, 4]`
      `[1, 2, 3, 4].skipWhile(x -> x > 0)` == `[]`  
      *NOTE*: This may not terminate if every element of an infinite `Iterable`
      matches the `predicate`]]></haxe_doc>
		</skipWhile>
		<somes public="1" params="A" set="method" line="700" static="1">
			<f a="as">
				<t path="Iterable"><t path="Option"><c path="somes.A"/></t></t>
				<t path="Iterable"><c path="somes.A"/></t>
			</f>
			<haxe_doc>Returns all the `Some` values from a set of `Option`s</haxe_doc>
		</somes>
		<span public="1" params="A" set="method" line="708" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="span.A"/></t>
				<f a="">
					<c path="span.A"/>
					<x path="Bool"/>
				</f>
				<t path="Pair">
					<t path="Iterable"><c path="span.A"/></t>
					<t path="Iterable"><c path="span.A"/></t>
				</t>
			</f>
			<haxe_doc><![CDATA[Returns a `Pair` containing the longest prefix of `as` that match some 
        `predicate` and the rest of the `Iterable`  
        `[1, 2, 3, 4, 1, 2, 3].span(x -> x < 3)` == `([1, 2], [3, 4, 1, 2, 3])`]]></haxe_doc>
		</span>
		<successes public="1" params="A" set="method" line="715" static="1">
			<f a="as">
				<t path="Iterable"><t path="Outcome"><c path="successes.A"/></t></t>
				<t path="Iterable"><c path="successes.A"/></t>
			</f>
			<haxe_doc>Returns all the `Success` values from a set of `Outcome`s</haxe_doc>
		</successes>
		<tail public="1" params="A" get="inline" set="null" line="725" static="1">
			<f a="as">
				<t path="Iterable"><c path="tail.A"/></t>
				<t path="Iterable"><c path="tail.A"/></t>
			</f>
			<haxe_doc>Return all elements of an `Iterable` except the first one.  
        Returns [] if `as` is empty or only has one element  
        `[1, 2, 3].tail()` == `[2, 3]`  
        `[1].tail()` == `[]`
        `[].tail()` == `[]`</haxe_doc>
		</tail>
		<take public="1" params="A" set="method" line="734" static="1">
			<f a="as:count">
				<t path="Iterable"><c path="take.A"/></t>
				<x path="Int"/>
				<t path="Iterable"><c path="take.A"/></t>
			</f>
			<haxe_doc><![CDATA[Returns up to the first `count` elements of `as`  
      If `as` does not have >= `count` elements, it returns as many as it can  
      `[a, b, c, d].take(2)` == `[a, b]`  
      `[].take(2)` == `[]`]]></haxe_doc>
		</take>
		<takeWhile public="1" params="A" set="method" line="750" static="1">
			<f a="as:predicate">
				<t path="Iterable"><c path="takeWhile.A"/></t>
				<f a="">
					<c path="takeWhile.A"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="takeWhile.A"/></t>
			</f>
			<meta><m n=":nullSafety"><e>Off</e></m></meta>
			<haxe_doc><![CDATA[Returns elements from `as` until one is found that doesn't match
      `predicate`  
      `[1, 2, 3, 4, 5, 6].takeWhile(x -> x < 4)` == `[1, 2, 3]`]]></haxe_doc>
		</takeWhile>
		<toArray public="1" params="A" get="inline" set="null" line="766" static="1">
			<f a="as">
				<t path="Iterable"><c path="toArray.A"/></t>
				<c path="Array"><c path="toArray.A"/></c>
			</f>
			<haxe_doc>Converts an `Iterable` into an `Array`.  
        *NOTE*: Since this fully evaluates the `Iterable`, it may not terminate 
        if `as` is infinite.</haxe_doc>
		</toArray>
		<zip public="1" params="A:B:C" set="method" line="775" static="1">
			<f a="as:bs">
				<t path="Iterable"><c path="zip.A"/></t>
				<t path="Iterable"><c path="zip.B"/></t>
				<t path="Iterable"><t path="Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</t></t>
			</f>
			<haxe_doc>Returns `Pair`s of values from `as` and `bs`. If the two `Iterable`s are
        not the same length, `zip` stops at the end of the shorter one  
        `[1, 2, 3].zip(['a', 'b', 'c])` == `[(1, 'a'), (2, 'b'), (3, 'c')]`  
        `[1, 2, 3].zip([])` == `[]`</haxe_doc>
		</zip>
		<zipWith public="1" params="A:B:C" set="method" line="785" static="1">
			<f a="as:bs:transform">
				<t path="Iterable"><c path="zipWith.A"/></t>
				<t path="Iterable"><c path="zipWith.B"/></t>
				<f a=":">
					<c path="zipWith.A"/>
					<c path="zipWith.B"/>
					<c path="zipWith.C"/>
				</f>
				<t path="Iterable"><c path="zipWith.C"/></t>
			</f>
			<haxe_doc><![CDATA[Applies a `transform` function to corresponsing pairs of elements in
        `as` and `bs`  
        If the `Iterable`s don't have the same number of elements, `zipWith`
        will only apply until it reaches the end of the shorter one  
        `[1, 2, 3].zipWith([4, 5, 6], (x, y) -> x + y)` == `[1+4, 2+5, 3+6]` == `[5, 7, 9]`]]></haxe_doc>
		</zipWith>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<typedef path="interlude.iter.FilteredIterator" params="A" file="src/interlude/iter/IteratorTools.hx" module="interlude.iter.IteratorTools">
		<a>
			<next><f a=""><c path="interlude.iter.FilteredIterator.A"/></f></next>
			<hasNextWhere><f a="">
	<f a="">
		<c path="interlude.iter.FilteredIterator.A"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></hasNextWhere>
		</a>
		<haxe_doc>A type of `Iterator` that only yields elements matching some predicate</haxe_doc>
	</typedef>
	<typedef path="interlude.iter.MappableIterator" params="A:B" file="src/interlude/iter/IteratorTools.hx" module="interlude.iter.IteratorTools">
		<a>
			<next><f a="">
	<f a="">
		<c path="interlude.iter.MappableIterator.A"/>
		<c path="interlude.iter.MappableIterator.B"/>
	</f>
	<c path="interlude.iter.MappableIterator.B"/>
</f></next>
			<hasNext><f a=""><x path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>A type of `Iterator` that can apply a function before yielding each element</haxe_doc>
	</typedef>
	<class path="interlude.iter.IteratorTools" params="" file="src/interlude/iter/IteratorTools.hx">
		<asIterator public="1" params="A" get="inline" set="null" line="16" static="1">
			<f a="a">
				<c path="asIterator.A"/>
				<t path="Iterator"><c path="asIterator.A"/></t>
			</f>
			<haxe_doc>Converts a single element to an `Iterator` containing that element</haxe_doc>
		</asIterator>
		<empty public="1" params="A" get="inline" set="null" line="26" static="1">
			<f a=""><t path="Iterator"><c path="empty.A"/></t></f>
			<haxe_doc>Returns an empty `Iterator`</haxe_doc>
		</empty>
		<filtered public="1" params="A" set="method" line="34" static="1">
			<f a="as">
				<t path="Iterator"><c path="filtered.A"/></t>
				<t path="interlude.iter.FilteredIterator"><c path="filtered.A"/></t>
			</f>
			<haxe_doc>converts an `Iterator` into a `FilteredIterator`</haxe_doc>
		</filtered>
		<indexed public="1" params="A" set="method" line="50" static="1">
			<f a="as">
				<t path="Iterator"><c path="indexed.A"/></t>
				<t path="KeyValueIterator">
					<x path="Int"/>
					<c path="indexed.A"/>
				</t>
			</f>
			<haxe_doc>Converts an `Iterator` into one that maintains an index for its elements</haxe_doc>
		</indexed>
		<mapped public="1" params="A:B" set="method" line="60" static="1">
			<f a="as">
				<t path="Iterator"><c path="mapped.A"/></t>
				<t path="interlude.iter.MappableIterator">
					<c path="mapped.A"/>
					<c path="mapped.B"/>
				</t>
			</f>
			<haxe_doc>Converts an `Iterator` into a `MappableIterator`</haxe_doc>
		</mapped>
		<toArray public="1" params="A" get="inline" set="null" line="69" static="1">
			<f a="as">
				<t path="Iterator"><c path="toArray.A"/></t>
				<c path="Array"><c path="toArray.A"/></c>
			</f>
			<haxe_doc>Evaluates an `Iterator` as an `Array`  
        *NOTE* `as` must be finite</haxe_doc>
		</toArray>
		<toIterable public="1" params="A" set="method" line="75" static="1">
			<f a="as">
				<t path="Iterator"><c path="toIterable.A"/></t>
				<t path="Iterable"><c path="toIterable.A"/></t>
			</f>
			<haxe_doc>Converts an `Iterator` into an `Iterable`</haxe_doc>
		</toIterable>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.iter.KeyValueIteratorTools" params="" file="src/interlude/iter/KeyValueIterableTools.hx" module="interlude.iter.KeyValueIterableTools">
		<asKVIterable public="1" params="K:V" set="method" line="9" static="1">
			<f a="kvs">
				<t path="KeyValueIterator">
					<c path="asKVIterable.K"/>
					<c path="asKVIterable.V"/>
				</t>
				<t path="KeyValueIterable">
					<c path="asKVIterable.K"/>
					<c path="asKVIterable.V"/>
				</t>
			</f>
			<haxe_doc>Converts a `KeyValueIterator` into a `KeyValueIterable`</haxe_doc>
		</asKVIterable>
		<toArray public="1" params="K:V" set="method" line="16" static="1">
			<f a="kvs">
				<t path="KeyValueIterator">
					<c path="toArray.K"/>
					<c path="toArray.V"/>
				</t>
				<c path="Array"><t path="KeyValuePair">
	<c path="toArray.K"/>
	<c path="toArray.V"/>
</t></c>
			</f>
			<haxe_doc>Converts a `KeyValueIterator` into an `Array` of `KeyValuePair`s</haxe_doc>
		</toArray>
		<meta>
			<m n=":publicFields"/>
			<m n=":nullSafety"><e>Strict</e></m>
		</meta>
	</class>
	<class path="interlude.iter.KeyValueIterableTools" params="" file="src/interlude/iter/KeyValueIterableTools.hx">
		<kvMap public="1" params="K:A:B" set="method" line="26" static="1">
			<f a="kvs:transform">
				<t path="KeyValueIterable">
					<c path="kvMap.K"/>
					<c path="kvMap.A"/>
				</t>
				<f a=":">
					<c path="kvMap.K"/>
					<c path="kvMap.A"/>
					<c path="kvMap.B"/>
				</f>
				<t path="KeyValueIterable">
					<c path="kvMap.K"/>
					<c path="kvMap.B"/>
				</t>
			</f>
			<haxe_doc>A version of `mapL` whose `transform` function takes a key-value pair</haxe_doc>
		</kvMap>
		<toKVArray public="1" params="K:V" set="method" line="40" static="1">
			<f a="kvs">
				<t path="KeyValueIterable">
					<c path="toKVArray.K"/>
					<c path="toKVArray.V"/>
				</t>
				<c path="Array"><t path="KeyValuePair">
	<c path="toKVArray.K"/>
	<c path="toKVArray.V"/>
</t></c>
			</f>
			<haxe_doc>Converts a `KeyValueIterable` into an `Array` of `KeyValuePair`s</haxe_doc>
		</toKVArray>
		<meta>
			<m n=":publicFields"/>
			<m n=":nullSafety"><e>Strict</e></m>
		</meta>
	</class>
	<class path="interlude.reactive.BufferedRunner" params="" file="src/interlude/reactive/BufferedRunner.hx">
		<frontBuffer public="1" set="null" expr="[]">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</frontBuffer>
		<backBuffer public="1" set="null" expr="[]">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</backBuffer>
		<queue public="1" set="method" line="12"><f a="fn">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
</f></queue>
		<queueMany public="1" set="method" line="16"><f a="fns">
	<c path="Array"><f a=""><x path="Void"/></f></c>
	<c path="Array"><f a=""><x path="Void"/></f></c>
</f></queueMany>
		<resolve public="1" set="method" line="21"><f a=""><x path="Void"/></f></resolve>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="interlude.reactive.Observable" params="A" file="src/interlude/reactive/Observable.hx">
		<always public="1" params="A:B" set="method" line="26" static="1"><f a="o:value">
	<c path="interlude.reactive.Observable"><c path="always.A"/></c>
	<c path="always.B"/>
	<c path="interlude.reactive.Observable"><c path="always.B"/></c>
</f></always>
		<ap public="1" params="A:B" set="method" line="29" static="1"><f a="o:as">
	<c path="interlude.reactive.Observable"><f a="">
	<c path="ap.A"/>
	<c path="ap.B"/>
</f></c>
	<c path="interlude.reactive.Observable"><c path="ap.A"/></c>
	<c path="interlude.reactive.Observable"><c path="ap.B"/></c>
</f></ap>
		<asObservable public="1" params="X" get="inline" set="null" line="32" static="1"><f a="value">
	<c path="asObservable.X"/>
	<c path="interlude.reactive.Observable"><c path="asObservable.X"/></c>
</f></asObservable>
		<filter public="1" params="A" set="method" line="35" static="1"><f a="o:predicate">
	<c path="interlude.reactive.Observable"><c path="filter.A"/></c>
	<f a="">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<c path="interlude.reactive.Observable"><c path="filter.A"/></c>
</f></filter>
		<filterMap public="1" params="A:B" set="method" line="38" static="1"><f a="o:predicate:fn">
	<c path="interlude.reactive.Observable"><c path="filterMap.A"/></c>
	<f a="">
		<c path="filterMap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<c path="interlude.reactive.Observable"><c path="filterMap.B"/></c>
</f></filterMap>
		<filterFMap public="1" params="A:B" set="method" line="44" static="1"><f a="o:predicate:fn">
	<c path="interlude.reactive.Observable"><c path="filterFMap.A"/></c>
	<f a="">
		<c path="filterFMap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFMap.A"/>
		<t path="Task"><c path="filterFMap.B"/></t>
	</f>
	<c path="interlude.reactive.Observable"><c path="filterFMap.B"/></c>
</f></filterFMap>
		<flatMap public="1" params="A:B" set="method" line="50" static="1"><f a="o:fn">
	<c path="interlude.reactive.Observable"><c path="flatMap.A"/></c>
	<f a="">
		<c path="flatMap.A"/>
		<c path="interlude.reactive.Observable"><c path="flatMap.B"/></c>
	</f>
	<c path="interlude.reactive.Observable"><c path="flatMap.B"/></c>
</f></flatMap>
		<flatten public="1" params="A" set="method" line="56" static="1"><f a="oo">
	<c path="interlude.reactive.Observable"><c path="interlude.reactive.Observable"><c path="flatten.A"/></c></c>
	<c path="interlude.reactive.Observable"><c path="flatten.A"/></c>
</f></flatten>
		<map public="1" params="A:B" set="method" line="59" static="1"><f a="o:fn">
	<c path="interlude.reactive.Observable"><c path="map.A"/></c>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<c path="interlude.reactive.Observable"><c path="map.B"/></c>
</f></map>
		<replay public="1" params="A" set="method" line="63" static="1"><f a="o">
	<c path="interlude.reactive.Observable"><c path="replay.A"/></c>
	<x path="Void"/>
</f></replay>
		<unit public="1" params="A" set="method" line="65" static="1"><f a="o">
	<c path="interlude.reactive.Observable"><c path="unit.A"/></c>
	<c path="interlude.reactive.Observable"><t path="Unit"/></c>
</f></unit>
		<zip public="1" params="A:B" set="method" line="68" static="1"><f a="sA:sB">
	<c path="interlude.reactive.Observable"><c path="zip.A"/></c>
	<c path="interlude.reactive.Observable"><c path="zip.B"/></c>
	<c path="interlude.reactive.Observable"><t path="Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</t></c>
</f></zip>
		<zipWith public="1" params="A:B:C" set="method" line="71" static="1"><f a="sA:sB:fn">
	<c path="interlude.reactive.Observable"><c path="zipWith.A"/></c>
	<c path="interlude.reactive.Observable"><c path="zipWith.B"/></c>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<c path="interlude.reactive.Observable"><c path="zipWith.C"/></c>
</f></zipWith>
		<subscribers public="1" set="null" expr="[]">
			<c path="Array"><f a="">
	<c path="interlude.reactive.Observable.A"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</subscribers>
		<lastDispatched public="1" set="null" expr="None">
			<t path="Option"><c path="interlude.reactive.Observable.A"/></t>
			<meta><m n=":value"><e>None</e></m></meta>
		</lastDispatched>
		<mutate public="1" set="method" line="14">
			<f a="fn:?last" v=":true">
				<f a="">
					<c path="interlude.reactive.Observable.A"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="interlude.reactive.Observable"><c path="interlude.reactive.Observable.A"/></c>
			</f>
			<meta><m n=":value"><e>{ last : true }</e></m></meta>
		</mutate>
		<resolve public="1" set="method" line="20"><f a="value">
	<c path="interlude.reactive.Observable.A"/>
	<c path="interlude.reactive.Observable.A"/>
</f></resolve>
		<new public="1" set="method" line="9"><f a="?initial">
	<c path="interlude.reactive.Observable.A"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<typedef path="interlude.reactive.Surprise" params="A" file="src/interlude/reactive/Surprise.hx">
		<t path="Task"><t path="Outcome"><c path="interlude.reactive.Surprise.A"/></t></t>
		<meta><m n=":using"><e>interlude.reactive.Surprise.SurpriseTools</e></m></meta>
	</typedef>
	<class path="interlude.reactive.SurpriseTools" params="" file="src/interlude/reactive/Surprise.hx" module="interlude.reactive.Surprise">
		<ap public="1" params="A:B" set="method" line="9" static="1"><f a="ab:a">
	<t path="interlude.reactive.Surprise"><f a="">
	<c path="ap.A"/>
	<c path="ap.B"/>
</f></t>
	<t path="interlude.reactive.Surprise"><c path="ap.A"/></t>
	<t path="interlude.reactive.Surprise"><c path="ap.B"/></t>
</f></ap>
		<asSurprise public="1" params="A" set="method" line="12" static="1"><f a="value">
	<c path="asSurprise.A"/>
	<t path="interlude.reactive.Surprise"><c path="asSurprise.A"/></t>
</f></asSurprise>
		<filter public="1" params="A" set="method" line="15" static="1"><f a="s:predicate">
	<t path="interlude.reactive.Surprise"><c path="filter.A"/></t>
	<f a="">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<t path="interlude.reactive.Surprise"><c path="filter.A"/></t>
</f></filter>
		<flatMap public="1" params="A:B" set="method" line="18" static="1"><f a="s:fn">
	<t path="interlude.reactive.Surprise"><c path="flatMap.A"/></t>
	<f a="">
		<c path="flatMap.A"/>
		<t path="interlude.reactive.Surprise"><c path="flatMap.B"/></t>
	</f>
	<t path="interlude.reactive.Surprise"><c path="flatMap.B"/></t>
</f></flatMap>
		<map public="1" params="A:B" set="method" line="21" static="1"><f a="s:fn">
	<t path="interlude.reactive.Surprise"><c path="map.A"/></t>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<t path="interlude.reactive.Surprise"><c path="map.B"/></t>
</f></map>
		<mutate public="1" params="A" set="method" line="24" static="1"><f a="s:whenSuccess:whenFailure">
	<t path="interlude.reactive.Surprise"><c path="mutate.A"/></t>
	<f a="">
		<c path="mutate.A"/>
		<x path="Void"/>
	</f>
	<f a="message:?pos">
		<c path="String"/>
		<t path="haxe.PosInfos"/>
		<x path="Void"/>
	</f>
	<t path="interlude.reactive.Surprise"><c path="mutate.A"/></t>
</f></mutate>
		<mutate_ public="1" params="A" set="method" line="27" static="1"><f a="s:whenSuccess">
	<t path="interlude.reactive.Surprise"><c path="mutate_.A"/></t>
	<f a="">
		<c path="mutate_.A"/>
		<x path="Void"/>
	</f>
	<t path="interlude.reactive.Surprise"><c path="mutate_.A"/></t>
</f></mutate_>
		<zip public="1" params="A:B" set="method" line="30" static="1"><f a="sA:sB">
	<t path="interlude.reactive.Surprise"><c path="zip.A"/></t>
	<t path="interlude.reactive.Surprise"><c path="zip.B"/></t>
	<t path="interlude.reactive.Surprise"><t path="Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</t></t>
</f></zip>
		<zipWith public="1" params="A:B:C" set="method" line="33" static="1"><f a="sA:sB:fn">
	<t path="interlude.reactive.Surprise"><c path="zipWith.A"/></t>
	<t path="interlude.reactive.Surprise"><c path="zipWith.B"/></t>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<t path="interlude.reactive.Surprise"><c path="zipWith.C"/></t>
</f></zipWith>
		<meta>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="interlude.reactive.Task" params="A" file="src/interlude/reactive/Task.hx">
		<runner final="1" public="1" set="null" expr="{ }" line="6" static="1">
			<c path="interlude.reactive.BufferedRunner"/>
			<meta><m n=":value"><e>{ }</e></m></meta>
		</runner>
		<always public="1" params="A:B" set="method" line="33" static="1"><f a="t:value">
	<c path="interlude.reactive.Task"><c path="always.A"/></c>
	<c path="always.B"/>
	<c path="interlude.reactive.Task"><c path="always.B"/></c>
</f></always>
		<any public="1" params="A" set="method" line="36" static="1"><f a="t">
	<c path="interlude.reactive.Task"><c path="any.A"/></c>
	<x path="Bool"/>
</f></any>
		<ap public="1" params="A:B" set="method" line="39" static="1"><f a="fn:t">
	<c path="interlude.reactive.Task"><f a="">
	<c path="ap.A"/>
	<c path="ap.B"/>
</f></c>
	<c path="interlude.reactive.Task"><c path="ap.A"/></c>
	<c path="interlude.reactive.Task"><c path="ap.B"/></c>
</f></ap>
		<asTask public="1" params="X" get="inline" set="null" line="42" static="1"><f a="data">
	<c path="asTask.X"/>
	<c path="interlude.reactive.Task"><c path="asTask.X"/></c>
</f></asTask>
		<filter public="1" params="A" set="method" line="45" static="1"><f a="t:predicate">
	<c path="interlude.reactive.Task"><c path="filter.A"/></c>
	<f a="">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<c path="interlude.reactive.Task"><t path="Option"><c path="filter.A"/></t></c>
</f></filter>
		<filterMap public="1" params="A:B" set="method" line="48" static="1"><f a="t:predicate:fn">
	<c path="interlude.reactive.Task"><c path="filterMap.A"/></c>
	<f a="">
		<c path="filterMap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterMap.A"/>
		<c path="filterMap.B"/>
	</f>
	<c path="interlude.reactive.Task"><t path="Option"><c path="filterMap.B"/></t></c>
</f></filterMap>
		<filterFMap public="1" params="A:B" set="method" line="51" static="1"><f a="t:predicate:fn">
	<c path="interlude.reactive.Task"><c path="filterFMap.A"/></c>
	<f a="">
		<c path="filterFMap.A"/>
		<x path="Bool"/>
	</f>
	<f a="">
		<c path="filterFMap.A"/>
		<c path="interlude.reactive.Task"><c path="filterFMap.B"/></c>
	</f>
	<c path="interlude.reactive.Task"><t path="Option"><c path="filterFMap.B"/></t></c>
</f></filterFMap>
		<f_callbacks public="1" params="A" set="method" line="56" static="1"><f a="fn">
	<f a="callback">
		<f a="">
			<c path="f_callbacks.A"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<c path="interlude.reactive.Task"><c path="f_callbacks.A"/></c>
</f></f_callbacks>
		<flatMap public="1" params="A:B" set="method" line="59" static="1"><f a="t:fn">
	<c path="interlude.reactive.Task"><c path="flatMap.A"/></c>
	<f a="">
		<c path="flatMap.A"/>
		<c path="interlude.reactive.Task"><c path="flatMap.B"/></c>
	</f>
	<c path="interlude.reactive.Task"><c path="flatMap.B"/></c>
</f></flatMap>
		<flatten public="1" params="A" set="method" line="65" static="1"><f a="t">
	<c path="interlude.reactive.Task"><c path="interlude.reactive.Task"><c path="flatten.A"/></c></c>
	<c path="interlude.reactive.Task"><c path="flatten.A"/></c>
</f></flatten>
		<map public="1" params="A:B" set="method" line="68" static="1"><f a="t:fn">
	<c path="interlude.reactive.Task"><c path="map.A"/></c>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<c path="interlude.reactive.Task"><c path="map.B"/></c>
</f></map>
		<mutate public="1" params="A" set="method" line="71" static="1"><f a="t:fn">
	<c path="interlude.reactive.Task"><c path="mutate.A"/></c>
	<f a="">
		<c path="mutate.A"/>
		<x path="Void"/>
	</f>
	<c path="interlude.reactive.Task"><c path="mutate.A"/></c>
</f></mutate>
		<zip public="1" params="A:B" set="method" line="79" static="1"><f a="ta:tb">
	<c path="interlude.reactive.Task"><c path="zip.A"/></c>
	<c path="interlude.reactive.Task"><c path="zip.B"/></c>
	<c path="interlude.reactive.Task"><t path="Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</t></c>
</f></zip>
		<zipWith public="1" params="A:B:C" set="method" line="82" static="1"><f a="a:b:fn">
	<c path="interlude.reactive.Task"><c path="zipWith.A"/></c>
	<c path="interlude.reactive.Task"><c path="zipWith.B"/></c>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<c path="interlude.reactive.Task"><c path="zipWith.C"/></c>
</f></zipWith>
		<zipWith3 public="1" params="A:B:C:Z" set="method" line="86" static="1"><f a="a:b:c:fn">
	<c path="interlude.reactive.Task"><c path="zipWith3.A"/></c>
	<c path="interlude.reactive.Task"><c path="zipWith3.B"/></c>
	<c path="interlude.reactive.Task"><c path="zipWith3.C"/></c>
	<f a="::">
		<c path="zipWith3.A"/>
		<c path="zipWith3.B"/>
		<c path="zipWith3.C"/>
		<c path="zipWith3.Z"/>
	</f>
	<c path="interlude.reactive.Task"><c path="zipWith3.Z"/></c>
</f></zipWith3>
		<logMessage public="1" params="A" set="method" line="89" static="1"><f a="t:genMessage:?pos">
	<c path="interlude.reactive.Task"><c path="logMessage.A"/></c>
	<f a="data:?pos">
		<c path="logMessage.A"/>
		<t path="haxe.PosInfos"/>
		<c path="String"/>
	</f>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<c path="interlude.reactive.Task"><c path="logMessage.A"/></c>
</f></logMessage>
		<unit public="1" params="A" set="method" line="92" static="1"><f a="t">
	<c path="interlude.reactive.Task"><c path="unit.A"/></c>
	<c path="interlude.reactive.Task"><t path="Unit"/></c>
</f></unit>
		<data public="1" set="null" expr="null">
			<x path="Null"><c path="interlude.reactive.Task.A"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</data>
		<isComplete public="1" set="null" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isComplete>
		<observers public="1" set="null" expr="[]">
			<c path="Array"><f a="">
	<c path="interlude.reactive.Task.A"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</observers>
		<resolve public="1" set="method" line="19"><f a="data">
	<c path="interlude.reactive.Task.A"/>
	<c path="interlude.reactive.Task.A"/>
</f></resolve>
		<new public="1" set="method" line="12">
			<f a="?data" v="null">
				<c path="interlude.reactive.Task.A"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"><e>Strict</e></m>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<eof public="1" set="method"><f a=""><x path="Bool"/></f></eof>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/eval/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<writeByte public="1" set="method"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<haxe_doc>Use `sys.io.File.write` to create a `FileOutput`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/opt/hostedtoolcache/haxe/4.2.1/x64/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
</haxe>